- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/pull/923'
  title: 'gazebo_plugins: export plugin path in package.xml'
  body: >-
    `gazebo_plugins` does not have a `gazebo_ros` export in its package.xml, so
    it is not picked up by `gazebo_ros_paths_plugin`. This PR adds the necessary
    export tag and adds `gazebo_ros` as a dependency so that pluginlib processes
    this tag correctly.
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels: []
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/pull/914'
  title: use `.c_str()` for variadic template
  body: >-
    Not sure why this never was a problem, but I had to fix this in order to
    make it compile on OSX.
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels:
    - bug
    - ros2
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/904'
  title: calling gazebo error
  body: "it seems like wrong configuration of ignition\r\n```\r\n[Err] [ClientConfig.cc:222] Error copying default configuration file from [/usr/share/ignition/fuel_tools//config.yaml] to [/home/lewis/.ignition/fuel/config.yaml]\r\n\r\n[Err] [Err] [ClientConfig.cc:222] Error copying default configuration file from [/usr/share/ignition/fuel_tools//config.yaml] to [/home/lewis/.ignition/fuel/config.yaml]\r\n\r\n[ClientConfig.cc:222] Error copying default configuration file from [/usr/share/ignition/fuel_tools//config.yaml] to [/home/lewis/.ignition/fuel/config.yaml]\r\n```\r\nI can open gazebo with empty world, but with this error, importing existing .world file \r\nSo how to configure ignition. I just follow this link step by step:\r\n[http://gazebosim.org/tutorials?tut=install_ubuntu&cat=install](url)"
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels: []
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/884'
  title: '[ros2] Build errors in Windows'
  body: "I'm not sure if there's much Windows development going on here, but the ros2 branch _almost_ builds in Windows 10, apart from a few conflicting `#define`s and missing `usleep`. I would open a PR, but I think my fixes might be a little hacky so I wanted to get some opinions.\r\n\r\n1. `OUT` [is a macro in Windows](https://stackoverflow.com/questions/35907493/in-and-out-macros-in-minwindef-h), so I simply changed all template tparams from `OUT` to `T`.\r\n2. ROS2 and Gazebo each build fine on their own in Windows, but we see an issue with connecting them here because Gazebo includes `<windows.h>` and ROS uses `NO_ERROR` as an enum value, which is a macro in Windows. I think it should be the consumer's responsibility to make sure they don't clash, so I `#undef NO_ERROR` before including and tf2 headers from ROS.\r\n3. `usleep` does not exist in Windows (luckily gazebo_ros_pkgs was only relying on unistd.h indirectly, so no issue there). In gazebo_ros/utils.hpp I added a simple macro for `usleep` in Windows.\r\n4. I also noticed that ImuSensorPlugin isn't linked to gazebo_ros_imu_sensor, but I don't think that's related to Windows.\r\n\r\nIf it would help, I can get a branch with these changes."
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels:
    - bug
    - ros2
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/865'
  title: '[ros2] Can''t respawn robot using /spawn_entity'
  body: "Hello everyone,\r\n\r\nAs part of a Reinforcement Learning task using gazebo I need to be able to reset the pose of a robot, [MARA](https://github.com/AcutronicRobotics/MARA) in this case. The normal behavior of the process won't be to reset the model, but one of the use cases is that the robot gets stuck after selecting an undesired action (Trajectory). Since the robot will lose plenty of time while its stuck, it is convenient that the pose of the robot is reset to the initial one.\r\n\r\nMy first idea has been to first delete the robot entity, and then spawn it again. But I am struggling with the re-spawning part. Know that **I am completely open to any different approach**, like setting poses manually or anything. \r\n\r\nQuoting myself from [this](https://github.com/ros-simulation/gazebo_ros_pkgs/issues/863#issuecomment-450655312) issue:\r\n\r\n> My problems come when I try to spawn the [MARA](https://github.com/AcutronicRobotics/MARA) back again. First, I delete the entity successfully. Then, I try to spawn the robot the same way as in [this file](https://github.com/AcutronicRobotics/MARA/blob/master/mara_utils_scripts/scripts/spawn_entity.py) or even use the LaunchService -> LaunchDescription containing a node that launches the same `spawn_entity` file. But the result is the same, gazebo **process dies or the robot simply is not spawning**.\r\n\r\nJust to clarify, I manage to spawn MARA successfully in the initialization. But not after that. I have tried manually pausing the simulation while the re-spawning has to occur, but it has no effect.\r\n\r\nI have to mention that (gazebo+ros) are running in a different process. The learning script communicates with them successfully anyway.\r\n\r\n```python3\r\n    # Create the LauchService and feed the LaunchDescription obj. to it.\r\n    ls = LaunchService()\r\n    ls.include_launch_description(ld)\r\n    p = Process(target=ls.run)\r\n    p.start()\r\n```\r\n\r\n**Note**: Simple models re-spawn successfully ([issue](https://github.com/ros-simulation/gazebo_ros_pkgs/issues/863#issuecomment-450655312)), but they are not initially launched in the separate process. \r\n\r\n### Setup\r\nUbuntu 18.04, Gazebo 9.6.0, ROS Crystal."
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels:
    - bug
    - ros2
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/855'
  title: gazebo_ros/test_node GetSdf problems
  body: "The GetSdf test of gazebo_ros [is failing sometimes on Jenkins](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/ros2/gazebo_ros/test/test_node.cpp#L53). The failure is Jenkins does not report any message or signal.\r\n\r\nWhen run locally, although it finishes just fine, there are some warnings:\r\n```\r\n[ RUN      ] TestNode.GetSdf\r\nWarning [parser.cc:531] Converting a deprecated SDF source[data-string].\r\n[INFO] [gazebo_ros_node]: ROS was initialized without arguments.\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl service handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n[ERROR] [rclcpp]: Error in destruction of rcl client handle: the Node Handle was destructed too early. You will leak memory\r\n```\r\nThe warnings are gone if the test wait one second before run the [reset on the node_1 and node_2 pointers](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/ros2/gazebo_ros/test/test_node.cpp#L79). Without the warnings the test hangs with the following output:\r\n```\r\n[==========] Running 1 test from 1 test case.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from TestNode\r\n[ RUN      ] TestNode.GetSdf\r\nWarning [parser.cc:531] Converting a deprecated SDF source[data-string].\r\n```\r\nGiving a try in `gdb` it seems like the program is waiting on the [std::thread::join in the destructor of the Executor class](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/ros2/gazebo_ros/src/executor.cpp#L34):\r\n```gdb\r\n#0  0x00007ffff792dd2d in __GI___pthread_timedjoin_ex (threadid=140736436172544, thread_return=0x0, abstime=0x0, block=<optimized out>) at pthread_join_common.c:89\r\n#1  0x00007ffff6c977d3 in std::thread::join() () at /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#2  0x00007ffff7b9d9ac in gazebo_ros::Executor::~Executor() (this=0x555557319bb0, __in_chrg=<optimized out>)\r\n    at /home/jrivero/code/ros2/gazebo_ros_pkgs_ws/src/gazebo_ros_pkgs/gazebo_ros/src/executor.cpp:39\r\n#3  0x00007ffff7bbc989 in __gnu_cxx::new_allocator<gazebo_ros::Executor>::destroy<gazebo_ros::Executor>(gazebo_ros::Executor*) (this=0x555557319bb0, __p=0x555557319bb0)\r\n    at /usr/include/c++/7/ext/new_allocator.h:140\r\n#4  0x00007ffff7bbc84f in std::allocator_traits<std::allocator<gazebo_ros::Executor> >::destroy<gazebo_ros::Executor>(std::allocator<gazebo_ros::Executor>&, gazebo_ros::Executor*) (__a=..., __p=0x555557319bb0) at /usr/include/c++/7/bits/alloc_traits.h:487\r\n#5  0x00007ffff7bbc4b1 in std::_Sp_counted_ptr_inplace<gazebo_ros::Executor, std::allocator<gazebo_ros::Executor>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() (this=0x555557319ba0)\r\n    at /usr/include/c++/7/bits/shared_ptr_base.h:535\r\n#6  0x000055555556d084 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() (this=0x555557319ba0) at /usr/include/c++/7/bits/shared_ptr_base.h:154\r\n#7  0x000055555556c3f9 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() (this=0x5555573e9a98, __in_chrg=<optimized out>) at /usr/include/c++/7/bits/shared_ptr_base.h:684\r\n#8  0x00007ffff7ba7184 in std::__shared_ptr<gazebo_ros::Executor, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() (this=0x5555573e9a90, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/7/bits/shared_ptr_base.h:1123\r\n#9  0x00007ffff7ba71a0 in std::shared_ptr<gazebo_ros::Executor>::~shared_ptr() (this=0x5555573e9a90, __in_chrg=<optimized out>) at /usr/include/c++/7/bits/shared_ptr.h:93\r\n#10 0x00007ffff7ba4828 in gazebo_ros::Node::~Node() (this=0x5555573e99e0, __in_chrg=<optimized out>)\r\n    at /home/jrivero/code/ros2/gazebo_ros_pkgs_ws/src/gazebo_ros_pkgs/gazebo_ros/src/node.cpp:29\r\n#11 0x00007ffff7bbc9bd in __gnu_cxx::new_allocator<gazebo_ros::Node>::destroy<gazebo_ros::Node>(gazebo_ros::Node*) (this=0x5555573e99e0, __p=0x5555573e99e0)\r\n    at /usr/include/c++/7/ext/new_allocator.h:140\r\n#12 0x00007ffff7bbc88f in std::allocator_traits<std::allocator<gazebo_ros::Node> >::destroy<gazebo_ros::Node>(std::allocator<gazebo_ros::Node>&, gazebo_ros::Node*) (__a=..., __p=0x5555573e99e0) at /usr/include/c++/7/bits/alloc_traits.h:487\r\n#13 0x00007ffff7bbc62b in std::_Sp_counted_ptr_inplace<gazebo_ros::Node, std::allocator<gazebo_ros::Node>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() (this=0x5555573e99d0)\r\n    at /usr/include/c++/7/bits/shared_ptr_base.h:535\r\n#14 0x000055555556d084 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() (this=0x5555573e99d0) at /usr/include/c++/7/bits/shared_ptr_base.h:154\r\n#15 0x000055555556c3f9 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() (this=0x7fffffffd5d8, __in_chrg=<optimized out>) at /usr/include/c++/7/bits/shared_ptr_base.h:684\r\n#16 0x000055555556c276 in std::__shared_ptr<gazebo_ros::Node, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() (this=0x7fffffffd5d0, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/7/bits/shared_ptr_base.h:1123\r\n#17 0x000055555556cfc8 in std::__shared_ptr<gazebo_ros::Node, (__gnu_cxx::_Lock_policy)2>::reset() (this=0x7fffffffd650) at /usr/include/c++/7/bits/shared_ptr_base.h:1235\r\n#18 0x000055555556a755 in TestNode_GetSdf_Test::TestBody() (this=0x5555559693d0) at /home/jrivero/code/ros2/gazebo_ros_pkgs_ws/src/gazebo_ros_pkgs/gazebo_ros/test/test_node.cpp:48\r\n```\r\nMy guess is that the join is waiting the [`spin()`](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/ros2/gazebo_ros/src/executor.cpp#L39) function to finish but it never finishes. It suppose to finish with the [rclcpp::shutdown() executed in the constructor](https://github.com/ros-simulation/gazebo_ros_pkgs/blob/ros2/gazebo_ros/src/executor.cpp#L32)."
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels:
    - bug
    - ros2
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/851'
  title: '[ros2] Plugins failing to load'
  body: "I just tried the Crystal debs and no plugins from `gazebo_plugins` are loading properly, but plugins from `gazebo_ros` like `libgazebo_ros_factory.so` are loading.\r\n\r\nThen I also built `gazebo_ros_pkgs` from source against Crystal debs and got the same result. The errors look like this:\r\n\r\n`[Err] [Model.cc:1129] Exception occured in the Load function of plugin with name[gazebo_ros_force] and filename[libgazebo_ros_force.so]. This plugin will not run.  `\r\n\r\nThis was working a couple of days ago, so it looks like some upstream change may have affected these plugins. I haven't tried debugging further, but maybe one of our tests gives a better hint of what exactly is failing. "
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels:
    - bug
    - ros2
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/842'
  title: >-
    Adding  capability to clone and switch between gazebo servers in
    gazebo_ros_api_plugin.cpp
  body: "Hello everybody. \r\n\r\nI have done a research on that and I did not find anything like that in Gazebo-ROS API. Apologies in advance if I am mistaken and it's done somewhere (or if this issue already exists, I did not find it).\r\n\r\nMy idea is to apply the capability to clone simulations (like explained in http://gazebosim.org/tutorials?tut=clone_simulation&cat=) and give the capability to switch between gazebo servers (using https://bitbucket.org/osrf/gazebo/src/f4e51e8f64001beda70615ab8982a7d5a4e65b18/gazebo/transport/TransportIface.hh?at=default&fileviewer=file-view-default) in order to allow parallel simulation capability.\r\n\r\nThis could be interesting to be discussed (and more being myself a newbie, with so many wonderful programmers around here) before an implementation, due to how could be the best way to be focused.\r\n\r\nMaybe could be a good idea to just do a function which has the capability to generate and control (in a different thread) each simulation instead of control the clones and the Gazebo master switched, and even we could give the capability to control de cuantity of resources expended by the system and autogenerate more or less paralel simulations depending on that\r\n\r\nI think this could be a powerful addon for fields like machine learning.\r\n\r\nHope I have been clear. Have a nice day! :)"
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels: []
- url: 'https://github.com/ros-simulation/gazebo_ros_pkgs/issues/830'
  title: velocity got from /joint_states is wrong?
  body: "With `hardware_interface/EffortJointInterface` and gazebo7,  I published the effort commands as follows: \r\n```\r\nimport rospy\r\nfrom sensor_msgs.msg import JointState\r\nfrom geometry_msgs.msg import PoseStamped, PoseArray, Pose\r\nfrom std_msgs.msg import Float64\r\n\r\nclass CmdPub(object):\r\n    def __init__(self):\r\n        self.joints_pub=rospy.Publisher('my_effort_controller/command', Float64, queue_size=1)\r\n    \r\n    def function_pub_effort_elfin5(self, effort):       \r\n        self.joints_pub.publish(effort)\r\n\r\nif __name__=='__main__':\r\n    rospy.init_node('cmd_pub', anonymous=True)\r\n    cp = CmdPub()\r\n\r\n    effort = -6\r\n    while True:\r\n        effort = -1 * effort\r\n        cp.function_pub_effort_elfin5(effort)\r\n        rospy.sleep(5)\r\n        print \"effort \", effort             \r\n        \r\n    rospy.spin()\r\n```\r\n\r\nAnd I subscribed  /joint_states and plot position and velocity line: \r\n```\r\nrospy.Subscriber('/joint_states', JointState, joint_states_cb)\r\n```\r\n\r\nThe line I got is:\r\n\r\n![figure_1](https://user-images.githubusercontent.com/4652694/46589519-efd30500-cadc-11e8-884c-671a589d3f87.png)\r\n\r\nBut It seems the velocity is not currect. I caculated the velocity and got this:\r\n\r\n![figure_1-2](https://user-images.githubusercontent.com/4652694/46589538-2446c100-cadd-11e8-838e-cc9de15f9633.png)\r\n\r\nAre  there some error with these codes:\r\n```\r\nvoid GazeboRosJointStatePublisher::publishJointStates() {\r\n    ros::Time current_time = ros::Time::now();\r\n\r\n    joint_state_.header.stamp = current_time;\r\n    joint_state_.name.resize ( joints_.size() );\r\n    joint_state_.position.resize ( joints_.size() );\r\n    joint_state_.velocity.resize ( joints_.size() );\r\n\r\n    for ( int i = 0; i < joints_.size(); i++ ) {\r\n        physics::JointPtr joint = joints_[i];\r\n        double velocity = joint->GetVelocity( 0 );\r\n#if GAZEBO_MAJOR_VERSION >= 8\r\n        double position = joint->Position ( 0 );\r\n#else\r\n        double position = joint->GetAngle ( 0 ).Radian();\r\n#endif\r\n        joint_state_.name[i] = joint->GetName();\r\n        joint_state_.position[i] = position;\r\n        joint_state_.velocity[i] = velocity;\r\n    }\r\n    joint_state_publisher_.publish ( joint_state_ );\r\n}\r\n```\r\n\r\n  "
  repo: 'https://api.github.com/repos/ros-simulation/gazebo_ros_pkgs'
  labels: []

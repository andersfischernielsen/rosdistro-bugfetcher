- url: 'https://github.com/ros-planning/moveit/issues/1463'
  title: allow installation without ros_perception
  body: "### Description\r\n\r\nDebian packages depend on moveit-ros-perception, even if just using the moveit-kinematics package. That pulls in several hundred megabytes for packages (most noticably libopencv-dev), that some users may not need.\r\n\r\nIs it possible to loosen the dependency on ros_perception? https://github.com/ros-planning/moveit/blob/0eae58c58d7dcef712d5e0f0534466c87955f1c2/moveit_ros/planning/package.xml#L22\r\nCurrently the dependency is only needed, because planning_scene_monitor includes the occupancy_map_monitor. Would it be feasible, to convert that piece of code into a plugin structure (could you point me into the right direction?) Or can you think of other ways reducing the installed size of moveit for applications, where semi-static plans or just accessing the kinematics and robot state is sufficient?\r\n\r\nAnother use-case could be processing the sensor data on a high-end pc with octomap and opencv installed, while realtime control and sophisticated planning using moveit-ros-planning are executed on an embedded (but maybe realtime) device.\r\n\r\n### Your environment\r\n* ROS Distro: Melodic\r\n* OS Version: e.g. Ubuntu 18.04\r\n* Binary build\r\n\r\n### Steps to reproduce\r\n```\r\ndocker run -it ros:melodic-ros-base bash\r\napt install ros-melodic-moveit-kinematics\r\n```\r\n\r\n### Expected behaviour\r\n100-150MB disc usage would be fine.\r\n\r\n### Actual behaviour\r\n`After this operation, 622 MB of additional disk space will be used.`\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/issues/1454'
  title: Adding new planner to moveit build fail
  body: "### Description\r\nI am trying to add a new planner to the ompl planner list through moveit. \r\nI have followed the following steps:\r\n1. Installed moveit from source.\r\n2. Installed ompl from source. (ompl src dir cloned to 'ws_moveit/src' path, where ws_moveit is my moveit installation dir)\r\n3. Added my planner cpp file and header file to /ws_moveit/src/ompl/src/ompl/geometric/planners\r\nand headers_geometric.txt and modified src/moveit_planners/ompl/ompl_interface/src/planning_context_manager.cpp and planning_context_manager.h\r\n\r\nNow, when I try catkin_make console shows error as:\r\n_CMake Error at /opt/ros/melodic/share/catkin/cmake/catkin_package_xml.cmake:54 (message):\r\n  catkin_package_xml() package name 'ompl' in\r\n  '/home/sumedh/ws_moveit/src/moveit/moveit_planners/ompl/package.xml' does\r\n  not match current PROJECT_NAME 'moveit_planners_ompl'.  You must call\r\n  project() with the same package name before.\r\nCall Stack (most recent call first):\r\n  /opt/ros/melodic/share/catkin/cmake/catkin_package.cmake:99 (catkin_package_xml)\r\n  CMakeLists.txt:26 (catkin_package)_\r\n\r\n![issue](https://user-images.githubusercontent.com/37224480/57005886-9120c600-6ba9-11e9-9816-d638d3266ab2.png)\r\n\r\nI also tried manually adding package.xml as mentioned [here](https://moveit.ros.org/install/source/dependencies/)\r\n\r\nBut, when I remove ros-melodic-ompl with sudo apt-get remove ros-melodic-ompl\r\nthe console shows the following error:\r\n_CMake Error at CMakeLists.txt:22 (find_package):\r\n \"By not providing \"Findompl.cmake\" in CMAKE_MODULE_PATH this project has\r\n  asked CMake to find a package configuration file provided by \"ompl\", but\r\n  CMake did not find one.\r\n\r\n  Could not find a package configuration file provided by \"ompl\" with any of\r\n  the following names:\r\n\r\n    omplConfig.cmake\r\n    ompl-config.cmake\r\n\r\n  Add the installation prefix of \"ompl\" to CMAKE_PREFIX_PATH or set\r\n  \"ompl_DIR\" to a directory containing one of the above files.  If \"ompl\"\r\n  provides a separate development package or SDK, be sure it has been\r\n  installed.\"_\r\n\r\n![issue2](https://user-images.githubusercontent.com/37224480/57005900-b4e40c00-6ba9-11e9-8dd4-38c6735c6535.png)\r\n\r\nAlso, I am not sure what should be the CMAKE_PREFIX_PATH and whether I should run the cmake -DCMAKE_INSTALL_PREFIX=/opt/ros/hydro command.\r\n\r\nI am new to this and I have literally tried everything that i found on the internet.\r\nPlease guide me through this. @mamoll @davetcoleman  Thanks!\r\n\r\n### My environment\r\n* ROS Distro: [melodic]\r\n* OS Version: Ubuntu 18.04\r\n* Source build\r\n* If binary, which release version?\r\n* If source, which git commit or tag? https://bitbucket.org/ompl/ompl/\r\n\r\n### Backtrace or Console output\r\n\r\nUse [gist.github.com](gist.github.com) to copy-paste the console output or segfault backtrace using gdb.\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/issues/1452'
  title: 'chomp/OptimizerAdapter: Start state is empty'
  body: "### Description\r\nAttempted to use `chomp/OptimizerAdapter` after `OMPL`. Followed tutorials and faced the problem of `Start state is empty`. The example print-out can be seen at the bottom,\r\n\r\n### Your environment\r\n* ROS Distro: Melodic\r\n* OS Version: Ubuntu 18.04\r\n* Binary build, with `moveit_planners` built from source\r\n* `ros-melodic-moveit` binaries `1.0.1-0bionic.20190320.192509`\r\n* `moveit_planners` from `melodic-devel`\r\n\r\n### Steps to reproduce\r\n\r\nStart the tutorial through the **Getting Started** portion of [MoveIt! Tutorials](http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/getting_started/getting_started.html).\r\n\r\nAfter setting up the workspace, start following the steps of [Planning Adapter Tutorials](http://docs.ros.org/kinetic/api/moveit_tutorials/html/doc/planning_adapters/planning_adapters_tutorial.html), under **Running OMPL as a pre-processor for CHOMP**.\r\n\r\nI noticed that there might be some errors in this section, in order to use this setup with `chomp/OptimizerAdapter`, we would need the `ompl` planner to be called instead of `chomp`, so I believe an error we should be launching\r\n```\r\nroslaunch panda_moveit_config dmeo.launch\r\n```\r\ninstead of \r\n```\r\nroslaunch panda_moveit_config demo_chomp.launch\r\n```\r\n\r\nThe next error I got was \r\n```\r\n[ERROR] [1556590982.275248450]: Exception while loading planning adapter plugin 'chomp/OptimizerAdapter': According to the loaded plugin descriptions the class chomp/OptimizerAdapter with base class type planning_request_adapter::PlanningRequestAdapter does not exist. Declared types are  default_planner_request_adapters/AddIterativeSplineParameterization default_planner_request_adapters/AddTimeOptimalParameterization default_planner_request_adapters/AddTimeParameterization default_planner_request_adapters/Empty default_planner_request_adapters/FixStartStateBounds default_planner_request_adapters/FixStartStateCollision default_planner_request_adapters/FixStartStatePathConstraints default_planner_request_adapters/FixWorkspaceBounds industrial_trajectory_filters/AddSmoothingFilter industrial_trajectory_filters/NPointFilter industrial_trajectory_filters/UniformSampleFilter\r\n```\r\n\r\nAfter digging around, I found that the `chomp/OptimizerAdapter` was not built in the binaries, so I did the following\r\n```\r\ncd /tmp\r\ngit clone -b melodic-devel https://github.com/ros-planning/moveit\r\ncp -r /tmp/moveit/moveit_planners ~/ws_moveit/src/.\r\n```\r\nRebuilding them again now,\r\n```\r\ncd ~/ws_moveit\r\ncatkin clean -y\r\ncatkin build\r\n```\r\nI then got a dependency issue, which was solved with\r\n```\r\nsudo apt-get install ros-melodic-moveit-resources\r\ncatkin build\r\n```\r\nThe workspace built without any issues, however when I launched the demo via\r\n```\r\nroslaunch panda_moveit_config demo.launch\r\n```\r\nadding the **Motion Planning** panel in `rviz`, under **Planning** tab -> **Planning Group**: panda_arm ->**Goal State**: random_valid, **Plan and Execute**. I got the following logs\r\n\r\n### Console output and the files I edited from tutorials\r\nhttps://gist.github.com/aaronchongth/116e85a65d26e3daef7c47fbed98e209\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/issues/1441'
  title: Self-Collision with Panda Tutorial
  body: "### Description\r\n\r\nI modified the move_group_python_interface tutorial slightly to plan this motion and a collision occurred when the plan was executed.\r\n![Screenshot from 2019-04-17 15-25-49](https://user-images.githubusercontent.com/14183751/56320702-53905780-612a-11e9-8198-e7d26ae0adef.png)\r\n[github issue.zip](https://github.com/ros-planning/moveit/files/3091538/github.issue.zip)\r\n\r\n\r\n### Your environment\r\n* ROS Distro: Kinetic\r\n* OS Version: Ubuntu 16.04\r\n* Source or Binary build? Moveit is a Binary, but the tutorial was cloned\r\n* If binary, which release version? 0.9.15\r\n* If source, which git commit or tag? moveit_tutorials c4efe28\r\n\r\n### Steps to reproduce\r\nStarting pose: \r\n    pose = geometry_msgs.msg.PoseStamped()\r\n    pose.header.frame_id = \"/panda_link0\"\r\n    pose.pose.position.x = 0.5\r\n    pose.pose.position.y = 0.3\r\n    pose.pose.position.z = 0.2\r\n    pose.pose.orientation.x = 0\r\n    pose.pose.orientation.y = 0\r\n    pose.pose.orientation.z = 0\r\n    pose.pose.orientation.w = 1\r\n\r\nDesired pose: \r\n    pose_goal = geometry_msgs.msg.PoseStamped()\r\n    pose_goal.header.frame_id = \"/panda_link0\"\r\n    pose_goal.pose.position.x = -0.4\r\n    pose_goal.pose.position.y = -0.2\r\n    pose_goal.pose.position.z = 0.4\r\n    pose_goal.pose.orientation.x = 0\r\n    pose_goal.pose.orientation.y = 0\r\n    pose_goal.pose.orientation.z = 0\r\n    pose_goal.pose.orientation.w = 1\r\n    group.set_pose_target(pose_goal)\r\n\r\n\r\n    plan = group.plan()\r\n    execute = group.execute(plan, wait=True)\r\n\r\n\r\n### Actual behaviour\r\nSelf-collision\r\n\r\n### Backtrace or Console output\r\nN/A\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels:
    - bug
- url: 'https://github.com/ros-planning/moveit/issues/1432'
  title: Propose to create a place to hold advanced applications of MoveIt
  body: "Following up the discussion in [MoveIt meeting july-25th-2018](https://discourse.ros.org/t/moveit-maintainer-meeting-recap-july-25th-2018/5504), we released the [ROS2 Grasp Library](https://discourse.ros.org/t/ros2-grasp-library-moveit-openvino-initial-release-0-4-0/8285) these days. This package enables Intel OpenVINO toolkit to accelerate GPD and provides MoveIt interface. To comply with our commitment, we also created a demo with a UR5 robot working with the ROS2 Grasp Library and MoveIt. The demo can be launched in both simulation and real execution, which intends to show how to use them together with the correct configuration. However, we didn’t find a proper place in MoveIt to add this demo and its tutorial.\r\n\r\nFirst to my thought, MoveIt tutorial is an option for this. But to my understanding, MoveIt tutorial aims to provide tutorials for MoveIt API and tools with a consistent MoveIt Configure Package, which seems not proper to hold advanced applications, that may use different robot arm configurations or contain some usage of external code such as perception functions.\r\n\r\nTherefore, we propose to add a repo under ros_planning to hold the code of or links to advanced industrial robot applications developed on MoveIt. This could bring some great advantages.\r\n\r\nOne good reason is to provide another way to cover MoveIt features. MoveIt is a fast evolving project, as @davetcoleman indicated (https://github.com/ros-planning/moveit/issues/1284), the MoveIt tutorial may be difficult to maintain and easily “become out of date”. And the use cases of MoveIt tutorial just cover small subset of MoveIt API. From my experience, I have witnessed several groups dropped MoveIt to use robot factory control interface, just because they don’t know how to deal with the situation, when a bad goal IK result causes the robot arm motions flipping whole around. I believe many features in MoveIt could resolve this, but it is not obvious for beginners. Sometimes even though users are familiar with the MoveIt tutorial, it is still difficult for them to use MoveIt. Here is a recent [example](https://discourse.ros.org/t/workspace-for-testing-moveit/8617). However, advanced applications that aim to solve real world problems can have good coverage of MoveIt features. And it is natural for people to see something really works before exploring deep into the details. \r\n\r\nAnother advantage is that this can enhance widespread acceptance of MoveIt by demonstrating the extensibility of the MoveIt API. MoveIt is a flexible motion planning framework. There are many techniques that can be well integrated with MoveIt, such as the grasp planning and object detection for visual manipulation, or software architecture and hardware acceleration for motion planning and perception AI. All of these are not necessary to go into MoveIt, because MoveIt is already a large project. However, there is a lack of information to connect them well with MoveIt. And I believe there are many groups or individuals who are developing applications around these topics. If there is a place where users can easily share, explore and try some advanced applications, the advantage of using MoveIt would be more convincing. \r\n\r\nAlong with the advantages, there could be some practical issues that make the project difficult to maintain. For example, each application may have a different MoveIt Config package due to the different hardware used. It may be difficult to find a common standard for testing the application execution. Some hardware used in the applications may not be replaceable or accessible to the users. In practice of an internal project called “MoveIt App Zoo” of our group, we tried to reduce the maintenance burden by designing some rules on how to add new applications to the repo:\r\n\r\n1.\tEach application should be able to run in simulation without hardware. This requires the inclusion of proper sensors data used in the application, which can be a recorded rosbag or data in some specific format. \r\n2.\tEach application should provide a tutorial that follows the tutorial template, which consists of an overview description, hardware and software dependencies, environment setup and build (an option can be used to switch on/off the application build), application launch procedure and options, and the expected outputs.\r\n3.\tIt should be possible to customize the application to new scenarios. The clear instructions should be included in a customization note. \r\n\r\nAny comments or thoughts? "
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/issues/1425'
  title: 'Missing gazebo_ros, panda_moveit_config dependency found in .launch files'
  body: "\r\nI'm currently doing some research on static analysis of ROS packages at the IT University of Copenhagen, more specifically dependency checking of `.launch` files in ROS packages.\r\n\r\nThere seems to be a `$(find gazebo_ros)` in\r\n- `moveit/moveit_setup_assistant/templates/moveit_config_pkg_template/launch/gazebo.launch`\r\nthat's not declared in `moveit/moveit_setup_assistant/package.xml`\r\n\r\nInstalling `moveit_setup_assistant` without having `gazebo_ros` installed would make `roslaunch` fail on this `.launch` file, right? \r\n\r\nI'm unsure whether this is a dependency bug, since gazebo_ros might be installed during the installation of the rest of the MoveIt framework. \r\n\r\n---\r\n\r\nThere's also a dependency on `panda_moveit_config` in \r\n- the `panda` launch files in `moveit/moveit_ros/benchmarks/examples/` that's undeclared in `moveit/moveit_ros/benchmarks/package.xml`.\r\n\r\nAgain, I'm unsure if this is a bug or not. \r\n\r\n---\r\n\r\n### Your environment\r\n* ROS Distro: [Melodic (docker)]\r\n* OS Version: e.g. Ubuntu 16.04\r\n* Source\r\n* `master` branch (current)"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/issues/1418'
  title: joint state not update
  body: "### Description\r\n\r\nThe move_group joint state of the robot is not updated, or how to force it to update.\r\n\r\nThe following example executes an trajectory then read the joint values sleep for second and read them once more, one would expect the will be the same, and sometimes they are ans sometimes they are not. Sometimes the q0 is all zeros even when the robot is in the q position at the start of the node.\r\n\r\n### Your environment\r\n* ROS Distro: Kinetic\r\n* OS Version:Ubuntu 16.04\r\n* Binary: 0.9.15\r\n\r\n### Steps to reproduce\r\n```python\r\n#%% imports\r\nfrom __future__ import division, print_function\r\nimport rospy\r\nimport numpy as np\r\nfrom moveit_commander import MoveGroupCommander, RobotCommander\r\nfrom moveit_commander.conversions import pose_to_list\r\n\r\n#%% configuration\r\nnode_name    = 'move_to_joints_tutorial'\r\ngroup_name   = 'r2_arm'\r\nfmt          = '4.5f'\r\n\r\n#%% initialization\r\nrospy.init_node(node_name, anonymous=False)\r\ngroup = MoveGroupCommander(group_name)\r\n\r\n# sleep in order ROS to catch up\r\nrospy.sleep(1)\r\n\r\n#%% move to initial position in joints\r\nq = [0, 0, 0, -np.pi/2, 0, np.pi/2, 0]\r\n\r\ngroup.set_joint_value_target(q)\r\ntraj = group.plan()\r\ngroup.execute(traj)\r\n\r\n#%% test\r\nq0 = np.array(group.get_current_joint_values())\r\np0 = np.array(pose_to_list(group.get_current_pose().pose))\r\nrospy.sleep(1)\r\nq1 = np.array(group.get_current_joint_values())\r\np1 = np.array(pose_to_list(group.get_current_pose().pose))\r\n\r\n# numpy formating\r\nformatter = {'float':lambda x:format(x, fmt)}\r\nnp.set_printoptions(precision=4, suppress=True, formatter=formatter) \r\n\r\nprint('p0: ', p0)\r\nprint('p1: ', p1)\r\nprint()\r\nprint('q0: ', q0)\r\nprint('q1: ', q1)\r\n```\r\n\r\n### Expected behaviour\r\nOne would expect that the q0 and q1 would be same.\r\n\r\n### Actual behaviour\r\nAnd they are not.\r\n\r\n### Backtrace or Console output\r\n\r\n```\r\n[ INFO] [1553682829.214911072]: Loading robot model 'capek'...\r\n[ INFO] [1553682829.517011141]: Loading robot model 'capek'...\r\n[ INFO] [1553682829.633904980]: Loading robot model 'capek'...\r\n[ INFO] [1553682830.704457096]: Ready to take commands for planning group r2_arm.\r\n\r\np0:  [0.40098 1.00008 0.58677 0.00012 -1.00000 -0.00003 0.00155]\r\np1:  [0.40098 1.00008 0.58677 0.00012 -1.00000 -0.00003 0.00154]\r\n\r\nq0:  [0.00000 0.00000 0.00000 0.00000 0.00000 0.00000 0.00000]\r\nq1:  [0.00013 0.00363 0.00004 -1.57023 0.00005 1.57082 -0.00007]\r\n```\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/pull/1382'
  title: Fix alignment of Eigen transforms
  body: "As pointed out at [ROS answers](https://answers.ros.org/question/317202/moveit-segfaults-due-to-eigen), the memory alignment of RobotState variables is not sufficient for new AVX support in Eigen, which requires 32- or even 64-byte alignment instead of the default 16-byte alignment.\r\n\r\nThis PR makes the alignment dependent on the corresponding variable `EIGEN_MAX_ALIGN_BYTES`.\r\nhttps://eigen.tuxfamily.org/dox/classEigen_1_1aligned__allocator.html\r\n"
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []
- url: 'https://github.com/ros-planning/moveit/pull/1373'
  title: 'MSA: re-add missing build dependencies'
  body: 'Address #1371. Re-add some missing build dependencies removed in #1341.'
  repo: 'https://api.github.com/repos/ros-planning/moveit'
  labels: []

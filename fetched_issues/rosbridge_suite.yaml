- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/407'
  title: invalid syntax in websocket launch
  body: "<!-- If you have a question about how to use rosbridge, please ask at https://answers.ros.org/ -->\r\n<!-- For solutions to common problems, see TROUBLESHOOTING.md -->\r\n\r\n\r\n## Expected Behavior\r\nI am trying to launch a web-socket server from ros2_ament_cmake branch \r\n\r\n## Actual Behavior\r\nI ran the launch command :\r\n`ros2 launch rosbridge_server rosbridge_websocket.launch`\r\n\r\nbut I got the following error message \r\n`[ERROR] [launch.LaunchService]: Caught exception in launch (see debug for traceback): invalid syntax (rosbridge_websocket.launch, line 1)\r\n`\r\n\r\n## Specifications\r\n\r\n  - ROS Version (`echo $ROS_DISTRO`): crystal\r\n  - OS Version (`grep DISTRIB_CODENAME /etc/lsb-release`):\r\n  - Rosbridge Version (`roscat rosbridge_server package.xml | grep '<version>'`): ros2_ament_cmake\r\n  - Tornado Version (`python -c 'import tornado; print tornado.version'`):\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/406'
  title: ClientManager not defined/instantiated in websocket_handler.py
  body: "<!-- If you have a question about how to use rosbridge, please ask at https://answers.ros.org/ -->\r\n<!-- For solutions to common problems, see TROUBLESHOOTING.md -->\r\n\r\n\r\n## Expected Behavior\r\nRosbridgeWebSocket shoudl have a member variable like self.client_manager = ClientManager() and then it is called\r\n\r\n## Actual Behavior\r\nRosbridgeWebSocket class does not have a member variable client_manager. In other words, it is never declared until it checks for it when it reaches to \"if cls.client_manager\"'.\r\n\r\n## Steps to Reproduce the Problem\r\n\r\n  1. Just instated RosbridgeWebSocket and call open or close methods\r\n\r\n## Specifications\r\n\r\n  - ROS Version (`echo $ROS_DISTRO`): melodic\r\n  - OS Version (`grep DISTRIB_CODENAME /etc/lsb-release`): Ubuntu 18.04\r\n  - Rosbridge Version (`roscat rosbridge_server package.xml | grep '<version>'`): 0.11.x\r\n  - Tornado Version (`python -c 'import tornado; print tornado.version'`): 4.2.1\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/399'
  title: Subscriber unable to receive messages
  body: "<!-- If you have a question about how to use rosbridge, please ask at https://answers.ros.org/ -->\r\n<!-- For solutions to common problems, see TROUBLESHOOTING.md -->\r\n\r\n## Behavior\r\n\r\nI'm not sure if this is the expected behavior or not...\r\n\r\nI have an application using roslibpy (https://github.com/gramaziokohler/roslibpy) to connect to a rosbridge server and communicate. It needs to publish and subscribe to topics. The flow goes something like this:\r\n\r\n1. Create client, connect to rosbridge\r\n2. Subscribe to some topics, publish to some topics, communicate back and forth with ROS\r\n3. Disconnect from rosbridge and exit\r\n\r\nIt works the first time the client application runs, but the second time, it is able to publish messages but it is not able to receive messages it subscribes to. I was looking at the code and saw in `subscribers.py` line 217 that when a topic no longer has any subscribers, rosbridge unregisters the topic. I commented out these lines and my application now works.\r\n\r\nWhy is this behavior there? Is there a workaround for something like this? I cannot guarantee that there will always be at least one subscriber for the topic and I want to be able to connect a new client and subscribe to messages.\r\n\r\n## Specifications\r\n\r\n  - ROS Version (`echo $ROS_DISTRO`): melodic\r\n  - OS Version (`grep DISTRIB_CODENAME /etc/lsb-release`): bionic\r\n  - Rosbridge Version (`roscat rosbridge_server package.xml | grep '<version>'`): 0.11.0\r\n  - Tornado Version (`python -c 'import tornado; print tornado.version'`): 4.5.3\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/375'
  title: CBOR missing in fedora for releasing in melodic
  body: "Hi @mvollrath, \r\n\r\nI am getting the following error while releasing the latest version of rosbridge in melodic. Could you follow this up? The latest version is released in kinetic and lunar already.\r\n\r\n```\r\n\r\n==> git-bloom-generate -y rosrpm --prefix release/melodic melodic -i 0\r\nGenerating source RPMs for the packages: ['rosbridge_suite', 'rosbridge_library', 'rosbridge_server', 'rosapi']\r\nRPM Incremental Version: 0\r\nRPM Distributions: ['28']\r\nReleasing for rosdistro: melodic\r\n\r\nPre-verifying RPM dependency keys...\r\nRunning 'rosdep update'...\r\nCould not resolve rosdep key 'python-cbor' for distro '28':\r\nNo definition of [python-cbor] for OS [fedora]\r\n\trosdep key : python-cbor\r\n\tOS name    : fedora\r\n\tOS version : 28\r\n\tData: debian:\r\n- python-cbor\r\ngentoo:\r\n- dev-python/cbor\r\nubuntu:\r\n- python-cbor\r\n\r\nFailed to resolve python-cbor on fedora:28 with: Error running generator: Failed to resolve rosdep key 'python-cbor', aborting.\r\npython-cbor is depended on by these packages: ['rosbridge_library']\r\n<== Failed\r\nSome of the dependencies for packages in this repository could not be resolved by rosdep.\r\nYou can try to address the issues which appear above and try again if you wish, or continue without releasing into RPM-based distributions (e.g. Fedora 24).\r\n```"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/pull/373'
  title: Use slice replacement for glob lists
  body: "This commit fixes a bug introduced in 76a9bc449b2be7a7c2ffad2ee4e37b45974c7e9e .\r\n\r\nThe variables `topics_glob`, `services_glob` and `params_glob`, plus some other methods, were moved to a separate file. This caused the `get_globs` function to replace only the local reference of these collections. \r\n\r\nUsing a slice replacement avoids creating a new list and keeps using the same instances as external sources. Of course this is far from optimal, but at least it fixes the issue of not getting the value of the params from outside once imported."
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/372'
  title: python-cbor package not available in trusty/indigo
  body: >-
    The package was introduced in xenial, so if any further indigo releases from
    develop are planned, I can add some logic to make the server not break at
    import time.
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/368'
  title: Tag release?
  body: "Hello!\r\n\r\nIt's been about 6 months since 0.9.0 was released. Can we get another tagged release? I'm shipping Rosbridge to a few dozen robot fleets and the current devel branch has some pretty important fixes I'd like to include. \r\n\r\nThanks!"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/367'
  title: CBOR compression summary
  body: "### PRs\r\n\r\n- [x] https://github.com/RobotWebTools/rosbridge_suite/pull/364\r\n- [x] https://github.com/RobotWebTools/rosbridge_suite/pull/365\r\n- [x] https://github.com/RobotWebTools/roslibjs/pull/303\r\n- [x] https://github.com/RobotWebTools/ros3djs/pull/239\r\n\r\n### Background\r\n\r\nPrevious to these changes, there are two options for encoding data between rosbridge and clients: JSON and JSON inside a base64-encoded PNG image.\r\n\r\nBoth of these options are text-based.  Human-readable messages are great, but when the message data is thousands of integer values, the value of human readability diminishes and decoding speed becomes a bigger concern.  When visualizing messages containing large blobs of binary data such as PointCloud2 or OccupancyGrid, these existing methods don't scale.\r\n\r\nWith the goal of increasing both the **capacity** and **speed** of rosbridge/roslibjs encoding and decoding, I started looking for a binary encoding format that could a) comply to the rosbridge protocol and b) quickly decode numeric arrays as views of a JavaScript `ArrayBuffer`.\r\n\r\n[CBOR](https://tools.ietf.org/html/rfc7049) is a perfect fit.  It implements a superset of JSON, adds byte arrays, and is extensible with tags.  With the addition of the [draft typed array tags](https://tools.ietf.org/html/draft-ietf-cbor-array-tags-00), it meets all of the requirements.  CBOR libraries are available for most languages and I found fast implementations for Python and JavaScript.\r\n\r\n### Benchmarks\r\n\r\nBefore implementing CBOR compression I wanted to make sure it was actually faster than JSON or PNG compression.  I set up a Node.js application to simulate encoding and decoding some ubiquitous ROS message types containing binary data: sensor_msgs/Image and sensor_msgs/PointCloud2.\r\n\r\n640x480 RBG Image:\r\n```\r\nCBOR encode: 1.523ms\r\nJSON encode: 269.129ms\r\nCBOR size: 921711 bytes\r\nJSON size: 11474451 bytes\r\nCBOR decode: 0.672ms\r\nJSON decode: 95.300ms\r\n```\r\n\r\nPointCloud2 with 1928 points @ 32 point_step:\r\n```\r\nCBOR encode: 0.201ms\r\nJSON encode: 12.775ms\r\nCBOR size: 62001 bytes\r\nJSON size: 703239 bytes\r\nCBOR decode: 0.174ms\r\nJSON decode: 6.152ms\r\n```\r\n\r\nFor sake of completeness, I also tested geometry_msgs/PoseStamped where JSON is faster, as expected:\r\n```\r\nCBOR encode: 0.172ms\r\nJSON encode: 0.017ms\r\nCBOR size: 179 bytes\r\nJSON size: 232 bytes\r\nCBOR decode: 0.125ms\r\nJSON decode: 0.019ms\r\n```\r\n\r\nAfter my proof-of-concept integration with rosbridge and roslibjs, I ran some more tests on a real application to verify that it would increase frame rate in a \"real world\" setting where message decoding competes with rendering for JavaScript time.  I compared the average decoding time for the first 100 messages of a 5,000 point PointCloud2:\r\n\r\n```\r\nJSON: 0.83ms\r\nCBOR: 0.1ms\r\nPNG: 45.37ms\r\n```\r\n\r\nNote that PNG didn't actually spend 45ms on the main thread because it decodes asynchronously, this was the \"wall time\" from message receipt to the handler being run.\r\n\r\nA 80,000 point PointCloud2 demonstrates how much better binary encoding can scale:\r\n\r\n```\r\nJSON: 10.99ms\r\nCBOR: 0.11ms\r\nPNG: 264.48ms\r\n```\r\n\r\nFinally, I ran a \"stress test\" to see how a ROS3DJS PointCloud2 compares to rviz.  I made a [small patch to ROS3DJS to enable CBOR encoding with fast buffer-flipping](https://github.com/RobotWebTools/ros3djs/pull/239).  I was able to view a 250,000 point cloud with no frames dropped.  The same application with JSON or PNG decoding dropped at least one frame per message at this scale.  When I increased the cloud density to 500,000 points there was a visible frame drop with CBOR.  I noticed a similar frame drop in rviz on the same cloud.\r\n\r\nTo summarize, when CBOR compression is used, ROS3DJS has the same capacity for rendering point clouds as rviz.\r\n\r\n### Web Socket Compression\r\n\r\nTo make CBOR message wire size as small as possible, I made a PR to enable [per-message deflate](https://tools.ietf.org/html/rfc7692#section-7) algorithm on the web socket server.  This should result in smaller messages than PNG compression where wire size is a concern (not connecting to localhost).\r\n\r\nThis compression technique is better than PNG compression because it is handled by the browser before the message makes it to the JavaScript main thread.\r\n\r\n### Implementation\r\n\r\nCBOR works best when transmitted as a binary web socket message, so I took some liberty with the protocol.  Instead of sending a JSON message with a base64 string of CBOR data, the server sends an unwrapped binary protocol message.\r\n\r\nOn the client side, this message is received as an `ArrayBuffer` and the CBOR decoder is run on it directly to produce an object, just like the JSON decoder.  From there, everything works the same.\r\n\r\nI produced some code to support typed array tags:\r\n* On the server side, [cbor_conversion.py](https://github.com/EndPointCorp/rosbridge_suite/blob/cbor_encoding/rosbridge_library/src/rosbridge_library/internal/cbor_conversion.py) extracts CBOR-friendly values from a ROS message including tagged typed arrays.\r\n* On the client side, [cborTypedArrayTags.js](https://github.com/EndPointCorp/roslibjs/blob/cbor/src/util/cborTypedArrayTags.js) defines a \"tagger\" for the decoder to efficiently unpack tagged arrays.\r\n\r\n### Backwards Compatibility\r\n\r\nSince CBOR is completely opt-in (the server will never send a CBOR binary message unless the client requests it), clients without CBOR decoding support are safe from newer server versions.\r\n\r\nIf the client requests CBOR but it is not available on the server side, the server will send JSON messages instead.\r\n\r\n### When to use CBOR\r\n\r\nCBOR is not ideal for all messages and transports, but it's safe to say that it's the best choice for any message containing a large amount of binary data when using roslibjs in a browser.\r\n\r\nJSON is still faster and better for small messages such as transforms, or messages containing mostly strings.\r\n\r\nPNG is best in some specific edge cases.  It is still *potentially* the smallest wire size where transport compression is not available, depending on the data.  When the data is mostly redundant, e.g. an array full of zeros, PNG messages *can* be smaller and decode faster than CBOR, because the deflate algorithm is efficient in this case, but when the data is more random, PNG will often have a *larger* wire size and longer decoding time than regular JSON compression.  This makes it a poor choice for PointCloud2 and situationally useful for Image or OccupancyGrid."
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/pull/365'
  title: Add param to enable ws per-message deflate
  body: "Tornado has its own per-message deflate compression option, which\r\ncompresses each WebSocket message.  The compression level should be\r\nroughly equivalent to PNG compression, depending on whether the message is\r\nJSON or binary (CBOR).  The encoding/decoding time will be much faster\r\nthan protocol PNG compression.\r\n\r\nThis param should be enabled when wire size is important, e.g. not\r\nconnecting to localhost."
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/358'
  title: Connection to websocket server closed
  body: "Hello, I am having an issue where the websocket server closes when I try to publish a message. I am using the code found here : http://iguanatronics.com/simple-tutorial-on-rosbridge-and-roslibjs/. NOTICE : \"cnd\" in lines 12 and 13 must be changed to \"static\". I am running roscore, turtlesim_node, and launching rosbridge. When I open the file in my web browser, it connects to the websocket server just fine, but disconnects when I click the \"Publish Message\" button.\r\n\r\nROS version 1.14.3 melodic\r\nUbuntu version 18.04.1 LTS bionic\r\n\r\nUPDATE\r\n\r\nThe same code works on a different computer with the same version of ROS and Ubuntu. What could be the problem? Are there any specific dependencies I should be looking at?"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/354'
  title: What *Is* correct timestamp for a message (particularly a STAMPED message)
  body: "# TL;DR\r\n**Defect:** \r\nRosBridge nukes valid header stamp values on received messages and replaces it with a value that is auto-generated (at receipt time).  While this behavior \\*may\\* be desirable in some general scenarios, it's absolutely the **wrong** thing to do on Stamped message types where the headers/stamp are exposed specifically because time is an integral component of the message data.  \r\n\r\n**Impact:**\r\nStamped datatypes cannot be submitted vis rosbridge without data corruption.\r\n\r\nI would like to fix it.  need advice on how \r\n\r\n---\r\nI had asked a question some time ago in an [issue](https://github.com/RobotWebTools/roslibjs/issues/255) on a related project (roslibjs) about asserting timestamps in headers when using rosbridge.  The use case centered around the ability to provide very time-accurate sensor data to a ROS instance via rosbridge where the *real* canonical time of the sensor data was known prior to transmission or receipt (by rosbridge).  \r\n\r\nAt the time it was mentioned that if a valid timestamp was presented in an incoming message that rosbridge would (by default) copy the values over as it was internally creating the instance of the ros time value.  That issues references the following [code as the responsible section](https://github.com/RobotWebTools/rosbridge_suite/blob/develop/rosbridge_library/src/rosbridge_library/internal/message_conversion.py#L222-L243) for this functionality.\r\n```\r\ndef _to_time_inst(msg, rostype, inst=None):\r\n    # Create an instance if we haven't been provided with one\r\n    if rostype == \"time\" and msg == \"now\":\r\n        return rospy.get_rostime()\r\n\r\n\r\n    if inst is None:\r\n        if rostype == \"time\":\r\n            inst = rospy.rostime.Time()\r\n        elif rostype == \"duration\":\r\n            inst = rospy.rostime.Duration()\r\n        else:\r\n            return None\r\n\r\n\r\n    # Copy across the fields\r\n    for field in [\"secs\", \"nsecs\"]:\r\n        try:\r\n            if field in msg:\r\n                setattr(inst, field, msg[field])\r\n        except TypeError:\r\n            continue\r\n\r\n\r\n    return inst\r\n```\r\n\r\nIn further trouble shooting positioning data within my system, I believe that I've discovered and validated this is in fact *NOT* the actual system behavior.  When submitting Stamped Message types via ros bridge (like _PoseStamped_) the values provided are replace with the rostime \\*when\\* the message is received.\r\n\r\nIn a StampedPose, the stamp value of the header really is intended to be the canonical representation of the time for which the message (independent of transience through the system).  \r\n\r\nProposed fix:\r\n\r\nRegarding the [following code](https://github.com/RobotWebTools/rosbridge_suite/blob/develop/rosbridge_library/src/rosbridge_library/internal/message_conversion.py#L272-L282) in `message_conversions.py` :\r\n```\r\ndef _to_object_inst(msg, rostype, roottype, inst, stack):\r\n    # Typecheck the msg\r\n    if type(msg) is not dict:\r\n        raise FieldTypeMismatchException(roottype, stack, rostype, type(msg))\r\n\r\n\r\n    # Substitute the correct time if we're an std_msgs/Header\r\n    try:\r\n        if rostype in ros_header_types:\r\n            inst.stamp = rospy.get_rostime()\r\n    except rospy.exceptions.ROSInitException as e:\r\n        rospy.logdebug(\"Not substituting the correct header time: %s\" % e)\r\n\r\n\r\n    inst_fields = dict(zip(inst.__slots__, inst._slot_types))\r\n```\r\n#### propose the following changes:\r\n- change the comment to indicate that substituting receive time data is not 'correcting' data\r\n- change the behavior to test if there is (valid) data in the header and to leave it.\r\n\r\n\r\n## Questions\r\nIs this something that i should just change and submit a merge request?  or is there a need to set this up to require some additional paramters for the rosbridge to minimize the chance of breaking other system which might accidentally rely on this error.\r\n\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/pull/350'
  title: fix a few problems
  body: "* `xrange` is not available in Python3, `range` works for both Python versions\r\n* the variable `v` is undefined in `search_param`, comparing the implementation with the sibling functions I expect `name` to be the intended variable\r\n* The module `udp_handler` is using the `Authentication` service but wasn't importing the module"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/pull/348'
  title: 'use package format 2, remove unnecessary dependencies'
  body: >-
    This uses format 2 for the package manifest files. Additionally I removed
    the build dependency on `rospy` which isn't necessary.
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/342'
  title: websocket connection on melodic
  body: "Hi, \r\n\r\nI am trying rosbridge out on a fresh install of 18.04 and Melodic, but I can't seem to be able to connect using websockets.I compiled rosbirdge_suite from source (master branch) and its dependencies (namely rosauth/master) and used rosdep to install any system dependencies that might exist. \r\n\r\nRunning the simple tutorial from [here](http://wiki.ros.org/roslibjs/Tutorials/BasicRosFunctionality) I keep getting the following error:\r\n\r\n`Connected to websocket server. test.html:18:5\r\nThe connection to ws://localhost:9090/ was interrupted while the page was loading. roslib.min.js:1:19480\r\nError connecting to websocket server:  \r\n`\r\n```yaml\r\n\r\n{ target: WebSocket, \r\n  isTrusted: true, \r\n  currentTarget: WebSocket, \r\n  eventPhase: 2, \r\n  bubbles: false,\r\n  cancelable: false,  \r\n  defaultPrevented: false, \r\n  composed: false, \r\n  timeStamp: 225,\r\n  cancelBubble: false, … }\r\n  test.html:22:5\r\n\r\n```\r\nMaybe i forgot to install something? I am unsure. This works perfectly fine on 16.04; I tried running the unit tests that come with `rosbridge_library` and they all pass. \r\n\r\nAny help would be much appreciated. \r\n\r\nCheers!\r\n\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/341'
  title: ImportErrors
  body: "Dear all,\r\n\r\nI have tried to run rosbridge_suite on ```Ubuntu 18.04```, ```ROS Melodic```. For that I have conducted the following steps:\r\n1. Create a catkin workspace.\r\n2. Clone rosbridge_suite repository into src folder of catkin workspace.\r\n3. Build the workspace (it built successfully).\r\n4. ```roslaunch rosbridge_server rosbridge_websocket.launch```\r\n\r\nThe last step led to the following error messages:\r\n```bash\r\n     from rosapi import proxy, objectutils, params\r\nImportError: No module named rosapi\r\n```\r\nand\r\n```bash\r\n     from rosbridge_server import RosbridgeWebSocket\r\nImportError: No module named rosbridge_server\r\n```\r\n\r\nI have then added the path of those modules to the ```$PYTHONPATH```, but then the errors were referring to other missing modules, namely ```rosserivce```(in rosapi) and ```rosauth.srv```(in rosbridge_server).\r\n\r\nSince I haven't found any references of how to solve this problem, I came to the conclusion to share this with you. I hope, that I got it right, that in general rosbridge can be already applied to Melodic (conclusion based on closed [issue #333](https://github.com/RobotWebTools/rosbridge_suite/issues/333) and that this problem has already a solution.\r\n\r\nGreetings!"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/321'
  title: bson exception block rosbridge sending out json to websocket
  body: "To install rosbridge_suit, I run\r\n`sudo apt-get install ros-indigo-rosbridge-server\r\nsudo pip install bson twisted\r\n`\r\nbson version is **0.5.1**\r\nAfter subscribe ros topic via web api, the rosbridge is blocked when it tried to send out the json file.\r\nIn these two files:\r\n\r\n> /ros/lib/python2.7/dist-packages/rosbridge_library/internal/message_conversion.py\r\n> /ros/lib/python2.7/dist-packages/rosbridge_library/protocol.py\r\n\r\nIt import bson and call bson.Binary:\r\n\r\n```\r\ndef get_encoder():\r\n    global binary_encoder\r\n    if binary_encoder is None:\r\n        binary_encoder_type = rospy.get_param('~binary_encoder', 'b64')\r\n        if binary_encoder_type == 'b64':\r\n            binary_encoder = standard_b64encode\r\n        elif binary_encoder_type == 'bson':\r\n            binary_encoder = bson.Binary   \r\n        else:\r\n            print \"Unknown encoder type '%s'\"%binary_encoder_type\r\n            exit(0)\r\n    return binary_encoder\r\n```\r\n\r\nAnd\r\n```\r\ndef has_binary(d):\r\n    if type(d)==bson.Binary:\r\n        return True\r\n    if type(d)==dict:\r\n        for k,v in d.iteritems():\r\n            if has_binary(v):\r\n                return True\r\n    return False\r\n```\r\nHere is the problem that python argue that\r\n\r\n> 'module' object has no attribute 'Binary'\r\nI did some fix by myself. But it will be good have a official fix for this problem."
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/318'
  title: Incorrect imports in tests
  body: "during the tests: \r\n\r\n- test_advertise\r\n- test_publish\r\n- test_call_service\r\n- test_subscribe\r\n- test_service_capabilities\r\n\r\nInvalidArgumentException  and MissingArgumentException are imported from protocol\r\n`from rosbridge_library.protocol import InvalidArgumentException, MissingArgumentException\r\n`\r\ninstead of from `internal.exceptions` \r\n```\r\nfrom rosbridge_library.internal.exceptions import InvalidArgumentException\r\nfrom rosbridge_library.internal.exceptions import MissingArgumentException\r\n```\r\nas seen in the [protocol.py](https://github.com/RobotWebTools/rosbridge_suite/blob/ee339d54474b87aa2f56b4755cbf095a99d25bff/rosbridge_library/src/rosbridge_library/protocol.py#L36)\r\n\r\nDiscovered this by accident after removing the unused imports from protocol.py in #315   "
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/pull/317'
  title: 'Removed tornado source code, added dependency'
  body: "There are debian packages for both tornado and backports, that contain newer versions as the source code copied inside of rosbridge_server. \r\nTherefore the source code has been deleted and replaced with run dependencies on the corresponding debian packages.\r\n"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []
- url: 'https://github.com/RobotWebTools/rosbridge_suite/issues/308'
  title: rosbridge_tcp send less than 29200Bytes when subscribe /map
  body: "I run rosbridge_tcp on my ubuntu14.04 device，and run a python client to subscribe /map data on windows，my map‘s resolution is 1147 X 508，I can only receive 29200Bytes， why？\r\n\r\nThe following is my python client code：\r\n```python\r\nimport time                              \r\nimport socket                            \r\nimport simplejson \r\nimport threading\r\n\r\ndef subscribeMap():\r\n\tsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n\t#sock.settimeout(10)\r\n\tsock.connect(('192.168.1.111', 9090))\r\n\t#sock.setblocking(0)\r\n\r\n\tdata = {\r\n\t\t'op':'subscribe',\r\n\t\t'topic':'/map',\r\n\t\t'type':'nav_msgs/OccupancyGrid'\r\n\t}\r\n\r\n\tst = simplejson.dumps(data)\r\n\tsock.send(str.encode(st))\r\n\twhile 1:\r\n\t\ttry:\r\n\t\t\trtn = sock.recv(65536)\r\n\t\t\t#print(\"===>map data: \", rtn)\r\n\t\t\tprint(\"$$$$$$ map size: %d\" % len(rtn),total_size, type(rtn))\r\n\t\texcept:\r\n\t\t\ttime.sleep(0.01)\r\n\t\t\tcontinue\r\n\tsock.close()\r\n\r\nif __name__ == '__main__':\r\n\r\n    subscribeMap()\r\n    print(\"app exit\")\r\n```"
  repo: 'https://api.github.com/repos/RobotWebTools/rosbridge_suite'
  labels: []

- url: 'https://github.com/stack-of-tasks/pinocchio/pull/795'
  title: >-
    Make visualization functionalities independent from RobotWrapper, closes
    #663
  body: "This PR allows to use visualization routines independently from `RobotWrapper`.\r\nAlong with #791, this closes #663.\r\n\r\nIn short, this is what I did:\r\n- create a submodule `pinocchio.display`\r\n- create a class `pinocchio.display.AbstractDisplay`, which is meant to be the base class for all present and future displays. It defines a common interface and implements a few common functionalities\r\n- create classes `pinocchio.display.GepettoDisplay` and `pinocchio.display.AbstractDisplay`, which subclass `AbstractDisplay` and implement the necessary functionalities for GepettoViewer and meshcat, respectively\r\n- put a display instance inside `RobotWrapper` and delegate all previous `RobotWrapper` viewing methods to this object. The display is settable through `setDisplay`. If `initDisplay` is called without the display being set, it defaults to `GepettoDisplay`, without any warning. `initMeshcatDisplay` is deprecated.\r\n- also, I added an algorithm called `scaleGeometryModel(gmodel,scale)` which allows to easily set the same scale (either a 3D-vector or a scalar) to each `GeometryObject` of a given `GeometryModel` (C++ with Python bindings).\r\n\r\nTo test `GepettoDisplay`: [examples/python/gepetto-viewer.py](https://github.com/gabrielebndn/pinocchio/blob/85b0c4a61d578fd3e1ec1ec80cb623fbab4d3ae7/examples/python/gepetto-viewer.py)\r\n\r\nTo test `MeshcatDisplay`: [examples/python/meshcat-viewer.py](https://github.com/gabrielebndn/pinocchio/blob/85b0c4a61d578fd3e1ec1ec80cb623fbab4d3ae7/examples/python/meshcat-viewer.py)\r\n\r\nTo test them together: [examples/python/load-urdf.py](https://github.com/gabrielebndn/pinocchio/blob/85b0c4a61d578fd3e1ec1ec80cb623fbab4d3ae7/examples/python/load-urdf.py)\r\n\r\nTo test them within `RobotWrapper`: [examples/python/robot-wrapper-viewer.py](https://github.com/gabrielebndn/pinocchio/blob/85b0c4a61d578fd3e1ec1ec80cb623fbab4d3ae7/examples/python/robot-wrapper-viewer.py)\r\n\r\nI decided to put the displays in a separate submodule because it seemed more orderly and because\r\n> Namespaces are one honking great idea -- let's do more of those!\r\n\r\nThe changes in `RobotWrapper` should be perfectly backward-compatible. No code should be broken because of this PR. The only partial exception is `initMeshcatDisplay`, which has been deprecated because it should be handled differently, but still works.\r\n\r\nA few notes about `MeshcatDisplay`:\r\n- I installed Meshcat using `pip install --user meshcat`. However, I could not start the server with `meshcat-server`. What do I have to do in order to have this command?\r\n- Compared to the previous implementation, the new one is improved.\r\n  - objects are added to the viewer respecting the tree structure\r\n  - scaling is handled. With this modification and with the addition of `scaleGeometryModel`, [examples/python/meshcat-viewer.py](https://github.com/gabrielebndn/pinocchio/blob/85b0c4a61d578fd3e1ec1ec80cb623fbab4d3ae7/examples/python/meshcat-viewer.py) is showing the Romeo model with the correct scaling\r\n- Compared to the previous implementation, the API is a bit different. What used to be `initMeshcatDisplay` is now split between `initDisplay` and `loadDisplayModel`. This for keeping things separate and for uniformity with `GepettoDisplay`\r\n- I chose not to automatically perform `viewer.open()` because I figured that's not how you guys are working, maybe it can be a boolean option of `initDisplay`, defaulting to false?\r\n- Right now, `MeshcatDisplay` only loads the visual objects. It might be interesting to load the collision objects too, in order to display them if desired. This is what `GepettoDisplay` is doing. Adding this functionality would make the two viewers more similar to each other. It can certainly be done very easily. The main reason I did not do it is because I did not know how to toggle visibility of objects through Python. I'll leave it for others to implement\r\n- Right now, `MeshcatDisplay` is not able to handle textures. This is the reason why Romeo does not show up unless the color is manually set. However, it seems Meshcat itself is able to handle textures, so I think it should be implemented. This would remove the need of specifying the color for Romeo. Again, I'll leave it for others.\r\n\r\n@wxmerkt and @matthieuvigne, I would very much appreciate your feedback on this."
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/792'
  title: About the Urdf
  body: "I am trying to build a simple bipedal robot and using Pinocchio for Jacobian calculation. I import my robot into Pinocchio and cannot display it in gepetto-gui. \r\nThe error is like this:\r\n\r\nlibpng warning: iCCP: known incorrect sRGB p\r\nrofile\r\nqt.qpa.window: Window position QRect(208,-55\r\n 1023x1009) outside any known screen, using \r\nprimary screen\r\nlibpng warning: iCCP: known incorrect sRGB p\r\nrofile\r\nlibpng warning: iCCP: known incorrect sRGB p\r\nrofile\r\nlibpng warning: iCCP: known incorrect sRGB p\r\nrofile\r\nList of GroupNodes :\r\n   hpp-gui\r\n   python-pinocchio\r\n does not exist.: unspecified iostream_categ\r\nory error\r\n does not exist.: unspecified iostream_categ\r\nory error\r\n\r\nNode \"world/pinocchio/collisions/torso_0\" does not exist.\r\nNode \"world/pinocchio/collisions/arm_l_shou_p_0\" does not exist.\r\nNode \"world/pinocchio/collisions/arm_l_shou_r_0\" does not exist.\r\n\r\nCan you help me "
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/pull/791'
  title: '[python] Define buildModelsFromUrdf and createDatas function'
  body: "This PR partially addresses #663 by providing convenience Python methods for creating models and geometry models in a single call, and analogously for the data objects.\r\n\r\nThis PR is autonomous, so if it is agreed upon it might be safely accepted. I thought it might be better to split the changes in two separate PRs so that this part may be more easily reviewed.\r\n\r\nIn summary:\r\n- expose `buildGeomFromUrdf` accepting a single string for the package_directory, so we don't always have to put it inside a list\r\n- define a function called `buildModelsFromUrdf` which parses an URDF and returns a Pinocchio Model plus one or two GeometryModel(s), depending on the inputs (see docstring for more details)\r\n- define a Python method called `createData()` for `GeometryModel`, in analogy to `Model`\r\n- define a function called `createDatas(*models)`, taking any number of `Model` or `GeometryModel` objects and returning corresponding data objects (see docstring for more details)\r\n- use `buildModelsFromUrdf` and `createDatas` inside `RobotWrapper`\r\n\r\nThus, the recommended Python workflow is now the following:\r\n```\r\nmodel, collision_model, visual_model = pin.buildModelsFromUrdf(model_path, hint_list, root_joint)\r\ndata, collision_data, visual_data = pin.createDatas(model,collision_model,visual_model)\r\n```\r\nsaving a lot of typing in cases when `RobotWrapper` is not used (two lines instead of six).\r\n\r\nA few notes:\r\n- As an exception to the general rule of implementing things in C++ and exposing them in Python, I implemented the new methods purely in Python. They are in [shortcuts.py](https://github.com/gabrielebndn/pinocchio/blob/c7e39ca8da3971e31914b6f247f006ead79c4664/bindings/python/pinocchio/shortcuts.py). This for two reasons:\r\n  - These are basically shortcuts thought for rapid prototyping and for reducing the dependency on `RobotWrapper`. As such, they are not really needed in C++\r\n  - I figured it would be much easier to write and to maintain: implementing it in C++ would have meant creating at least 2 or 3 C++ overloads and and exposing 7 or 8 signatures depending whether the package directory is a string, a list, a vector, or not provided, and wether the mesh loader is provided or not. This way it is much more compact.\r\n- I greatly simplified the implementation of `buildModelsFromUrdf` with respect to the original code in `RobotWrapper`. This because it seemed to me that `RobotWrapper` was making a lot of redundant safety checks, such as `if \"buildGeomFromUrdf\" not in dir(pin)` (true if and only if the URDF module is not provided) or wether the elements in `package_dirs` are indeed all strings (let boost-python handle that). If you want to check, you may put extra care in reviewing commit \r\n8ae5cf4 (and possibly c7e39ca)\r\n\r\nHope this helps!"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/786'
  title: Build error with C++17
  body: "When trying to build pinocchio 2.1.1 with gcc-8 and the flag `-std=c++17`, I get a lot of build errors like this one:\r\n\r\n```\r\npinocchio/serialization/archive.hpp:39:60: error: ISO C++17 does not allow dynamic exception specifications\r\n                              const std::string & filename) throw (std::invalid_argument)\r\n                                                            ^~~~~\r\npinocchio/serialization/archive.hpp:66:58: error: ISO C++17 does not allow dynamic exception specifications\r\n                            const std::string & filename) throw (std::invalid_argument)\r\n                                                          ^~~~~\r\n```\r\n\r\nI'm not familiar with dynamic exception specifications, but according to [cppref](https://en.cppreference.com/w/cpp/language/except_spec), they were deprecated since c++11 and removed in c++17. Is it a good idea to remove them from pinocchio ?"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
    - c++
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/775'
  title: SRDF conventions and parsing
  body: "Hi guys,\r\n\r\nI want to raise a discussion and potential actions to be tackled regarding SRDF convention. My motivation is to have relevant semantic information that is used for motion planners, controllers, etc. Specifically I have these two points in mind:\r\n 1. Defining set of foot and hand end-effectors\r\n 2. Describing unimportant joints (i.e. joints that are not needed to be considered for planning, control, etc; e.g. neck joints).\r\n\r\nI would say that everyone agree that this information should be described in the SRDF. However it is not very clear for me how to properly do it. In any case I believe we can attach to this standard, otherwise we should discuss how to modify the SRDF standard.\r\n\r\n---\r\n\r\n**Point 1: set of foot and hand end-effector**\r\nI think the best way to do this is through the end_effector tag. With this tag we should also define the groups in order to semantically describe a leg or arm. Let me write an example for the HyQ robot:\r\n\r\n```\r\n    <!-- left front leg -->\r\n    <group name=\"lf_leg\">\r\n        <joint name=\"lf_haa_joint\" />\r\n        <joint name=\"lf_hfe_joint\" />\r\n        <joint name=\"lf_kfe_joint\" />\r\n        <chain base_link=\"trunk\" tip_link=\"lf_foot\" />\r\n    </group>\r\n    <!-- right front leg -->\r\n    <group name=\"rf_leg\">\r\n        <joint name=\"rf_haa_joint\" />\r\n        <joint name=\"rf_hfe_joint\" />\r\n        <joint name=\"rf_kfe_joint\" />\r\n        <chain base_link=\"trunk\" tip_link=\"rf_foot\" />\r\n    </group>\r\n    <!-- left hind leg -->\r\n    <group name=\"lh_leg\">\r\n        <joint name=\"lh_haa_joint\" />\r\n        <joint name=\"lh_hfe_joint\" />\r\n        <joint name=\"lh_kfe_joint\" />\r\n        <chain base_link=\"trunk\" tip_link=\"lh_foot\" />\r\n    </group>\r\n    <!-- right hind leg -->\r\n    <group name=\"rh_leg\">\r\n        <joint name=\"rh_haa_joint\" />\r\n        <joint name=\"rh_hfe_joint\" />\r\n        <joint name=\"rh_kfe_joint\" />\r\n        <chain base_link=\"trunk\" tip_link=\"lh_foot\" />\r\n    </group>\r\n\r\n    <end_effector name=\"lf_foot\" parent_link=\"lf_foot\" group=\"lf_leg\" />\r\n    <end_effector name=\"rf_foot\" parent_link=\"rf_foot\" group=\"rf_leg\" />\r\n    <end_effector name=\"lh_foot\" parent_link=\"lh_foot\" group=\"lh_leg\" />\r\n    <end_effector name=\"rh_foot\" parent_link=\"rh_foot\" group=\"rh_leg\" />\r\n```\r\n\r\nWith this example, you can parser:\r\n  1. The frame of the end-effector.\r\n  2. The number of joints of that chain, then, for instance, you can build an appropriate Jacobian.\r\n\r\nPlease note that it's missing the foot dimension. For that we will have to improve the SRDF. This is an example of how it could look:\r\n\r\n```\r\n    <foot name=\"lf_foot\" type=\"point\" /?>\r\n    <!-- for a humanoid case -->\r\n    <foot name=\"l_foot\" type=\"planar\" dim_x=\"0.1\" dim_y=\"0.1\" />\r\n```\r\n\r\n\r\n---\r\n\r\n**Point 2: Unrelevant joints***\r\nThere are sometime joints that you don't want to consider, these are examples:\r\n 1. Neck joints are not needed for walking planning.\r\n 2. Gripper joints are not controlled in torque (e.g. TSID)\r\n\r\nFor doing so, I suggest to extract this information from the groups tag, and the developer decides which group to use. In this case, it's important to define a naming convention for groups.\r\n\r\n---\r\n\r\n**Final note**\r\nThis might be long way discussion, and it's possible that we cannot make a decision any-time soon. I would invite everyone to this discussion, especially I would appreciate the point of view of main developers (@jcarpent @jmirabel @gabrielebndn @nim65s @olivier-stasse @nmansard).\r\n\r\n"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/774'
  title: Broken 2.1.2 binaries on robotpkg?
  body: "Robotpkg-pinocchio updated itself to 2.1.2. Now the Python bindings do not work\r\nIf I just do:\r\n```\r\nimport pinocchio\r\n```\r\nthis is the error I get\r\n```\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-1-6ede4ff3d689> in <module>()\r\n----> 1 import pinocchio as pin\r\n\r\n/opt/openrobots/lib/python2.7/site-packages/pinocchio/__init__.py in <module>()\r\n      4 \r\n      5 import numpy as np\r\n----> 6 from .robot_wrapper import RobotWrapper\r\n      7 from libpinocchio_pywrap import __version__\r\n      8 \r\n\r\n/opt/openrobots/lib/python2.7/site-packages/pinocchio/robot_wrapper.py in <module>()\r\n      3 #\r\n      4 \r\n----> 5 from . import libpinocchio_pywrap as pin\r\n      6 from . import utils\r\n      7 from .deprecation import deprecated\r\n\r\nImportError: /opt/openrobots/lib/python2.7/site-packages/pinocchio/libpinocchio_pywrap.so: undefined symbol: _ZN9pinocchio6python9exposeFCLEv\r\n```\r\n\r\nWhat I have tried:\r\n```\r\nsudo apt-get install --reinstall robotpkg-py27-pinocchio\r\nsudo apt-get install --reinstall robotpkg-hpp-fcl\r\nsudo apt-get install --reinstall robotpkg-py27-pinocchio\r\n```\r\nto no avail"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
- url: 'https://github.com/stack-of-tasks/pinocchio/pull/754'
  title: >-
    Derivatives algorithms are now all coherent with respect to the kinematics
    derivatives
  body: 'Fixes #639 '
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/749'
  title: Mac pinocchio import failure
  body: "I found the problem like the following when I tried to import the Pinocchio library:\r\nI have installed the boost, I am wondering why this happened.\r\n\r\n$ python\r\nPython 2.7.16 (default, Mar  4 2019, 09:01:38) \r\n[GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pinocchio\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/site-packages/pinocchio/__init__.py\", line 6, in <module>\r\n    from pinocchio.robot_wrapper import RobotWrapper\r\n  File \"/usr/local/lib/python2.7/site-packages/pinocchio/robot_wrapper.py\", line 5, in <module>\r\n    from . import libpinocchio_pywrap as pin\r\nImportError: dlopen(/usr/local/lib/python2.7/site-packages/pinocchio/libpinocchio_pywrap.so, 2): Symbol not found: __ZN5boost6system6detail20generic_category_ncxEv\r\n  Referenced from: /usr/local/opt/hpp-fcl/lib/libhpp-fcl.dylib\r\n  Expected in: /usr/local/opt/boost/lib/libboost_system-mt.dylib\r\n in /usr/local/opt/hpp-fcl/lib/libhpp-fcl.dylib"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/pull/746'
  title: '[unittest] [python] Fixes to Python unit tests'
  body: "Some fixes to the Python unit tests.\r\n- Python unit tests depending on optional components are now skipped if the required component is not installed. This way, even if they are executed, it will not generate an error\r\n- Added missing `bindings_com_velocity_derivatives` to Python unit tests CMakeLists\r\n- Adding `bindings_geometry_object_urdf` tp `PINOCCHIO_PYTHON_TESTS` only if URDFDOM is found (the same way `bindings_geometry_object` was added only id HPP-FCL is found). Actually, I am not sure about this. Now that the `unittest.skipUnless(pin.WITH_FOO_SUPPORT())` system is in place, we might just add everything and let the tests handle themselves. @nim65s, what do you think?\r\n- removed useless `unittest/python/tests.py`"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/pull/744'
  title: Improve support and check of Optional dependencies
  body: ''
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/740'
  title: 'v2.1.0 : Build error when hpp-fcl optional dependency is not available'
  body: "pinocchio v2.1.0 does not seem to build when hpp-fcl optional dependency is not available.\r\n\r\n```\r\n[ 73%] Building CXX object bindings/python/CMakeFiles/pinocchio_pywrap.dir/parsers/expose-parsers.cpp.o\r\ncd /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/bindings/python && /usr/lib/ccache/g++-7  -DPINOCCHIO_WITH_URDFDOM -Dpinocchio_pywrap_EXPORTS -isystem /home/antonio/wdc_workspace/install/pc/wanderpkg/include -I/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build -I/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include -I/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio/include -isystem /usr/include/python2.7 -isystem /home/antonio/wdc_workspace/install/pc/wanderpkg/include/eigen3  -pedantic -Wno-long-long -Wall -Wextra -Wcast-align -Wcast-qual -Wformat -Wwrite-strings -Wconversion -fPIC -w -O3 -DNDEBUG -fPIC   -isystem/usr/include/python2.7 -isystem/home/antonio/.local/lib/python2.7/site-packages/numpy/core/include -o CMakeFiles/pinocchio_pywrap.dir/parsers/expose-parsers.cpp.o -c /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio/bindings/python/parsers/expose-parsers.cpp\r\nIn file included from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf.hpp:268:0,\r\n                 from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/bindings/python/parsers/parsers.hpp:14,\r\n                 from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio/bindings/python/parsers/expose-parsers.cpp:5:\r\n/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf/geometry.hxx:294:51: error: ‘pinocchio::fcl::MeshLoaderPtr’ has not been declared\r\n                                              fcl::MeshLoaderPtr& meshLoader,\r\n                                                   ^~~~~~~~~~~~~\r\n/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf/geometry.hxx:375:34: error: ‘pinocchio::fcl::MeshLoaderPtr’ has not been declared\r\n                             fcl::MeshLoaderPtr& meshLoader,\r\n                                  ^~~~~~~~~~~~~\r\nIn file included from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf.hpp:268:0,\r\n                 from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/bindings/python/parsers/parsers.hpp:14,\r\n                 from /home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio/bindings/python/parsers/expose-parsers.cpp:5:\r\n/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf/geometry.hxx:411:37: error: ‘pinocchio::fcl::MeshLoaderPtr’ has not been declared\r\n                                fcl::MeshLoaderPtr meshLoader)\r\n                                     ^~~~~~~~~~~~~\r\n/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build/include/pinocchio/parsers/urdf/geometry.hxx:429:37: error: ‘pinocchio::fcl::MeshLoaderPtr’ has not been declared\r\n                                fcl::MeshLoaderPtr meshLoader)\r\n                                     ^~~~~~~~~~~~~\r\nbindings/python/CMakeFiles/pinocchio_pywrap.dir/build.make:665: recipe for target 'bindings/python/CMakeFiles/pinocchio_pywrap.dir/parsers/expose-parsers.cpp.o' failed\r\nmake[2]: *** [bindings/python/CMakeFiles/pinocchio_pywrap.dir/parsers/expose-parsers.cpp.o] Error 1\r\nmake[2]: Leaving directory '/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build'\r\nCMakeFiles/Makefile2:773: recipe for target 'bindings/python/CMakeFiles/pinocchio_pywrap.dir/all' failed\r\nmake[1]: *** [bindings/python/CMakeFiles/pinocchio_pywrap.dir/all] Error 2\r\nmake[1]: Leaving directory '/home/antonio/wdc_workspace/build/pc/wanderpkg/SOUP/pinocchio/src/pinocchio-build'\r\nMakefile:143: recipe for target 'all' failed\r\n```\r\n\r\nI've seen that there are `#ifdef PINOCCHIO_WITH_HPP_FCL` lying around in the code which could help fix this, but I'm not sure how to deal with this error as a hpp-fcl type is passed in the function signature. "
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/pull/737'
  title: '[computeSubtreeMasses] Fix bug for data.mass[0]'
  body: 'Correcting a bug introduced in #736'
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/735'
  title: How to interpret model.nq and model.nv?
  body: "Dear,\r\n\r\nI find the meaning of model.nq confusing in my c++ version of Pinocchio. I think that for a given robot model, the number of configurations should equal to the number of velocity variables. However, there exists discrepancies between these two numbers. For example, when I import a HRP2 robot model with `pinocchio::urdf::buildModel` method, ideally the DOFs should be (30 + 6 = 36). When I print the them, `model.nq = 60` and `model.nv = 30`. The velocity seems to be understandable but I am not sure about what is the meaning of **60** in `model.nq`. Why this configuration number is twice the velocity number? Can you give me a hint about how to understand it?\r\n\r\nThanks, "
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/729'
  title: Optinal dependency on hpp-fcl but fails to build if not found
  body: "Trying to compile the code (master=db8fe0add7d10ea31) from source on 16.04 Ubuntu for python2, I get the error:\r\n\r\n```\r\nIn file included from /home/jviereck/dev/tools/pinocchio/build27/include/pinocchio/parsers/urdf.hpp:268:0,\r\n                 from /home/jviereck/dev/tools/pinocchio/build27/include/pinocchio/bindings/python/parsers/parsers.hpp:14,\r\n                 from /home/jviereck/dev/tools/pinocchio/bindings/python/parsers/expose-parsers.cpp:5:\r\n/home/jviereck/dev/tools/pinocchio/build27/include/pinocchio/parsers/urdf/geometry.hxx:294:51: error: ‘pinocchio::fcl::MeshLoaderPtr’ has not been declared\r\n                                              fcl::MeshLoaderPtr& meshLoader,\r\n                                                   ^\r\n/home/jviereck/dev/tools/pinocchio/build27/include/pinocchio/parsers/urdf/geometry.hx\r\n```\r\n\r\nNote that it looks like my `cmake ..` configuration doesn't find the optinal hpp-fcc package. If the package is optional, I wonder why the compilation is breaking still."
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/726'
  title: Visualization of sample model not working
  body: "The following minimal example\r\n```\r\nimport pinocchio as pin\r\n\r\nmodel = pin.buildSampleModelHumanoid()\r\ngeom_model = pin.buildSampleGeometryModelHumanoid(model)\r\nq = pin.neutral(model)\r\n\r\nrobot = pin.RobotWrapper(model,geom_model,geom_model)\r\n\r\nraw_input(\"initDisplay\")\r\nrobot.initDisplay()\r\n\r\nraw_input(\"loadDisplayModel\")\r\nrobot.loadDisplayModel()\r\n\r\nraw_input(\"display\")\r\nrobot.display(q)\r\n\r\nprint(\"done\")\r\n```\r\nis not working. The model is not loaded inside gepetto-gui and it does not show up.\r\nHowever, gepetto-gui itself seems to be fine (`examples/python/gepetto-viewer.py`, which loads DAE files for romeo, is working for me).\r\n\r\nOn `loadDisplayModel()`, I get a bunch of errors like this\r\n```\r\n does not exist.: iostream error\r\n```\r\nfollowed by errors that look like\r\n```\r\nNode \"world/pinocchio/collisions/rlegshoulder_object\" does not exist.\r\n```\r\n\r\nI don't know where this problem might come from. Am I doing this right? Is there something wrong in `buildSampleGeometryModelHumanoid`? Can this be a probem of hpp-fcl instead of Pinocchio?"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/713'
  title: Pinocchio Mac Model importation problem
  body: "1. Does robot wrapper support model importation on Mac?\r\n\r\n2. Also, can Mac user use the graphic interface to show the robot motion on Mac like in ubuntu? \r\n\r\nI tried to install gepetto-viewer  on Mac, but it fails to compile. \r\n\r\nCan you help me find the problem \r\n\r\n\r\nIn [1]: from pinocchio.robot_wrapper import RobotWrapper\r\n   ...: \r\n   ...: pkg  = '$root_vol$HOME/Desktop/models'\r\n   ...: urdf = pkg + '/ur_description/urdf/ur5_gripper.urdf'\r\n   ...: robot = RobotWrapper(urdf,[pkg,])\r\n   ...: \r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-3f0456183d71> in <module>()\r\n      3 pkg  = '$root_vol$HOME/Desktop/models'\r\n      4 urdf = pkg + '/ur_description/urdf/ur5_gripper.urdf'\r\n----> 5 robot = RobotWrapper(urdf,[pkg,])\r\n\r\n/usr/local/lib/python2.7/site-packages/pinocchio/robot_wrapper.pyc in __init__(self, model, collision_model, visual_model, verbose)\r\n     64 \r\n     65         self.model = model\r\n---> 66         self.data = self.model.createData()\r\n     67 \r\n     68         self.collision_model = collision_model\r\n\r\nAttributeError: 'str' object has no attribute 'createData'"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/709'
  title: Mac Pinocchio install failure
  body: "I would like to install Pinocchio on Mac. When I try to import Pinocchio in the python2, I met the following error:\r\n\r\nImportError: dlopen(/usr/local/lib/python2.7/site-packages/pinocchio/libpinocchio_pywrap.so, 2): Symbol not found: __ZN5boost6system16generic_categoryEv\r\nReferenced from: /usr/local/lib/libhpp-fcl.dylib\r\nExpected in: /usr/local/opt/boost/lib/libboost_system-mt.dylib\r\nin /usr/local/lib/libhpp-fcl.dylib\r\n\r\nI guess this is caused by the library of hpp-fcl or the boost, though I have tried many times to install these two packages with latest home-brew. Can you help me out?\r\n"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels: []
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/708'
  title: Segmentation fault when using computeCollision() or computeCollisions()?
  body: "Hi\r\nWhile I do this  [5.0) prerequisites](http://projects.laas.fr/gepetto/doc/stack-of-tasks/pinocchio/master/md_doc_d-practical-exercises_5-planner.html) in python,  like calling:\r\n`se3.computeCollision(robot.collision_model, robot.collision_data, 2)` or\r\n`se3.computeCollisions(robot.collision_model, robot.collision_data, False)`\r\nthe program only crashed with `Segmentation fault (core dumped)`. \r\nI even don't know what happens. \r\nAnd should two objects bounce off when collision happens? Because I didn't find the forces should generated in corresponding file."
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug
- url: 'https://github.com/stack-of-tasks/pinocchio/issues/706'
  title: Error about collision checking in practical-exercises?
  body: "Hi, there\r\nI recently do the practical-exercises as your tutorial says [4.3) Collision checking](http://projects.laas.fr/gepetto/doc/stack-of-tasks/pinocchio/master/md_doc_d-practical-exercises_4-dyn.html)\r\nBut when I run in python, I meet an error:\r\n```\r\nFile \"example_q4_contact.py\", line 22, in <module>\r\n    dist = robot.checkCollision(idx)                          \r\n  File \"/home/xxx/pinocchio/doc/d-practical-exercises/src/robot_hand.py\", line 295, in checkCollision\r\n    dist = va.collision(vb, self.data)                          \r\n  File \"/home/xxx/pinocchio/doc/d-practical-exercises/src/robot_hand.py\", line 61, in collision\r\n    if all(0 <= ab <= 1):\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```\r\nAs the tutorial says: **Pinocchio also implement a complete and efficient collision checking based on FCL, also not used in the tutorial**, which means this way of collision checking is used temporary just for exercise. If I'm right, then where could I find the tutorial that Pinocchio implement based on FCL, not just exercise?  \r\nWish you have a nice day!"
  repo: 'https://api.github.com/repos/stack-of-tasks/pinocchio'
  labels:
    - bug

- url: 'https://github.com/ros-perception/vision_opencv/issues/273'
  title: '[Windows][melodic] add Windows build support'
  body: "This is an enhancement ticket for `vision_opencv`. I am using this ticket to track all the required work to bring up `vision_opencv` to be able to build & run on Windows/MSVC (which is verified in https://aka.ms/ros project). And hope the maintainers can take a look. Thanks!\r\n\r\n- [ ] (nice-have) [melodic] Fix travis CI #269 \r\n- [ ] (must-have) [Windows][melodic] remove path splash separator from 'package_dir' #267 \r\n- [ ] (must-have) add DLL import/export macros #266\r\n- [ ] (must-have) update CMakeLists.txt for Windows build environment #265"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/272'
  title: OpenCV4 instead of opencv3
  body: "I'm using latest vision of opencv, opencv 4.0.1, is there any plan to update repo to this version?\r\nIf you guys don't have a plan, is there any way to modify code to using this version of opencv?\r\nI have already modify src/vision_opencv/cv_bridge/CMakeLists.txt, change:\r\n```\r\nfind_package(OpenCV 3 REQUIRED\r\n  COMPONENTS\r\n    opencv_core\r\n    opencv_imgproc\r\n    opencv_imgcodecs\r\n CONFIG\r\n)\r\n```\r\nto \r\n```\r\nset(OpenCV_DIR /usr/local/share/opencv4)\r\nfind_package(OpenCV 4.0.1 EXACT REQUIRED)`\r\n```\r\nand output shows ROS find OPENCV:\r\n```\r\nsystem\r\n-- +++ processing catkin package: 'cv_bridge'\r\n-- ==> add_subdirectory(vision_opencv/cv_bridge)\r\n-- Boost version: 1.62.0\r\n-- Found the following Boost libraries:\r\n--   python\r\n-- Found OpenCV: /usr/local (found suitable exact version \"4.0.1\")\r\n-- Found PythonLibs: /usr/lib/arm-linux-gnueabihf/libpython2.7.so (found suitable version \"2.7.13\", minimum required is \"2.7\")\r\n```\r\nBut report error when :+1: \r\n```rospack depends cv_bridge```\r\n```\r\n[rospack] Error: package 'cv_bridge' depends on non-existent package 'opencv3' and rosdep claims that it is not a system dependency. Check the ROS_PACKAGE_PATH or try calling 'rosdep update'\r\n```"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/266'
  title: add DLL import/export macros
  body: >-
    add DLL import/export macros following guidelines from [ROS
    wiki](http://wiki.ros.org/win_ros/Contributing/Dll%20Exports)
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/252'
  title: Update README.md
  body: "Hi,\r\nI have verified **cv_bridge** on ubuntu 18.04, There's a **python boost** dependency that is different on ubuntu 16.04 and ubuntu 18.04.\r\n\r\nSo, we might be able to provide two dependent installation methods to install the specified dependencies on different systems."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/251'
  title: cv_bridge crash with ROS2 Python APIs
  body: "Hi,\r\n\r\nI'm using cv_bridge in some ROS2 Bouncy projects.\r\n\r\nIf I use the C++ APIs, everything works fine.\r\nOn the other hand with the Python ones my program crashes with no error message.\r\n\r\n```\r\nimport numpy as np\r\nimport cv2\r\nimport rclpy\r\nfrom cv_bridge import CvBridge\r\n\r\ndef main(args=None):\r\n\r\n    #rclpy.init(args=args)\r\n\r\n    br = CvBridge()\r\n\r\n    dtype, n_channels = br.encoding_to_dtype_with_channels('8UC3')\r\n\r\n    im = np.ndarray(shape=(480, 640, n_channels), dtype=dtype)\r\n\r\n    msg = br.cv2_to_imgmsg(im)\r\n    im2 = br.imgmsg_to_cv2(msg)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nIf I try to run the following code, it crashes during `br.encoding_to_dtype_with_channels('8UC3')`.\r\n\r\nMoreover note that I'm not able to call `rclpy.init(args=args)` if I'm importing `CvBridge`.\r\n\r\nI tried to run the unit tests contained in this repo using `colcon test` and they fail too.\r\n\r\nThe system is generated through [this](https://github.com/alsora/ros2-tensorflow/blob/master/docker/Dockerfile) Dockerfile\r\n\r\nAs a recap, I am using \r\n- Ubuntu 16.04\r\n- ROS2 Bouncy \r\n- Python 3.5.2\r\n- OpenCV Python 3.4.3\r\n"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/247'
  title: cv_bridge_boost library missing on Windows
  body: "I want to use the package `cv_bridge` in a Python script running on Windows 10 x64. I do not have Kinectic installed. I just need to import some packages to my program, such as `rosbag`, among others (In summary, my script takes video-data from a .bag file, and shows it on a GUI using OpenCV, all running on Windows).\r\n\r\nI already installed the package in my `C:\\Python27\\Lib\\site-packages` by running the `setup.py` file. When I run the Python script, the following error comes out:\r\n\r\n> from cv_bridge.boost.cv_bridge_boost import getCvType\r\nImportError: No module named boost.cv_bridge_boost\r\n\r\nI realized that the installation of this package on Windows didn't create the folder `boost `in the installation path, while in Ubuntu it exits. The folder contains the requested library, `cv_brigde_boost.so.` But as you can notice, this is a Linux format, so when I copy it to my package path on Windows, the error is still coming out, because it doesn't recognize it.\r\n\r\nIs it normal that the library` cv_brigde_boost` is not being created for Windows when I install the package? Or is there maybe any sort of missing dependency that I need? I am really stuck here, and I don't find much info about it. Thank you very much in advance."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/243'
  title: Add python3-numpy as build and execution dependency
  body: "`numpy` is necessary not only for test but also a dependency for building and runtime execution.\r\nMore details at https://github.com/ros2/rosdistro/pull/260"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/241'
  title: Move test dependencies into BUILD_TESTING to avoid build error
  body: >-
    Fix the issue in https://github.com/ros2/rosdistro/pull/260 due to some test
    dependencies that are find_package'd outside of a `BUILD_TESTING`
    conditional.
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/240'
  title: Add opencv as dependency and change assert_equal with assert
  body: "- Add opencv as dependency\r\n- Replace assert_equal with assert"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/237'
  title: Add python3_opencv as test dependency
  body: ' '
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/236'
  title: cv_bridge boost error
  body: "I am trying to create a ROS wrapper for caffe2 and I get the following error:\r\n[ERROR] [1532132328.463265]: bad callback: <bound method image_converter.callback of <__main__.image_converter instance at 0x7f01bdc8e7a0>>\r\nTraceback (most recent call last):\r\n  File \"/opt/ros/kinetic/lib/python2.7/dist-packages/rospy/topics.py\", line 750, in _invoke_callback\r\n    cb(msg)\r\n  File \"ros_mercnn.py\", line 72, in callback\r\n    cv_image = self.bridge.imgmsg_to_cv2(data, 'bgr8')\r\n  File \"/opt/ros/kinetic/lib/python2.7/dist-packages/cv_bridge/core.py\", line 182, in imgmsg_to_cv2\r\n    res = cvtColor2(im, img_msg.encoding, desired_encoding)\r\nArgumentError: Python argument types in\r\n    cv_bridge.boost.cv_bridge_boost.cvtColor2(numpy.ndarray, str, unicode)\r\ndid not match C++ signature:\r\n    cvtColor2(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\r\n\r\nAny help will be highly appreciated\r\n\r\n\r\n#!/usr/bin/env python\r\n\r\n\"\"\"Perform inference on a single image or all images with a certain extension\r\n(e.g., .jpg) in a folder.\r\n\"\"\"\r\n\r\nfrom __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\nfrom __future__ import unicode_literals\r\n\r\nfrom collections import defaultdict\r\nimport argparse\r\nimport cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)\r\nimport glob\r\nimport logging\r\nimport os\r\nimport sys\r\nimport time\r\n\r\nfrom caffe2.python import workspace\r\n\r\nimport roslib\r\n#roslib.load_manifest('my_package')\r\nimport sys\r\nimport rospy\r\n#import cv2\r\nfrom std_msgs.msg import String\r\nfrom sensor_msgs.msg import Image\r\nfrom cv_bridge import CvBridge, CvBridgeError\r\nimport numpy as np\r\nclass image_converter:\t\r\n\r\n\tdef __init__(self):\r\n\r\n\t\tself.bridge = CvBridge()\r\n\t\tself.image_sub = rospy.Subscriber(\"/usb_cam/image_raw\",Image,self.callback)\r\n\t\tcv2.waitKey(1000000)\r\n\tdef callback(self, data):\r\n\t\tcurrentframe = 0\r\n\t\ttry:\r\n\t\t\twhile True:\r\n \r\n\t\t\t\tcv_image = self.bridge.imgmsg_to_cv2(data, 'bgr8')\r\n\r\n\t\t\t\t\r\n\t\texcept CvBridgeError as e:\t\r\n\t\t\tprint(e)\r\ndef main(args):\r\n\tic = image_converter()\r\n\trospy.init_node('image_converter', anonymous=True)\r\n\ttry:\r\n\t\tcv2.waitKey(1000)\r\n\t\trospy.spin()\r\n\texcept KeyboardInterrupt:\r\n\t\tprint('Shutting Down')\r\n\tcv2.destroyAllWindows()\r\n\r\nif __name__ == '__main__':\r\n\r\n        workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\r\n  #      setup_logging(__name__)\r\n\tmain(sys.argv)\r\n\r\n\r\n\r\n\r\n"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/231'
  title: fix the build warning from inherent import numpy
  body: "There is build warning to complain the following:\r\n\r\n```\r\nIn file included from /workspace/codebase/vision_opencv/cv_bridge/src/module_opencv3.cpp:3:0:\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp: In function 'int do_numpy_import()':\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp:37:3: warning: converting to non-pointer type 'int' from NULL [-Wconversion-null]\r\n   import_array();\r\n   ^~~~~~~~~~~~\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp:38:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n }\r\n ^\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module_opencv3.cpp: At global scope:\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module_opencv3.cpp:82:19: warning: 'PyObject* failmsgp(const char*, ...)' defined but not used [-Wunused-function]\r\n static PyObject * failmsgp(const char * fmt, ...)\r\n                   ^~~~~~~~\r\nIn file included from /workspace/codebase/vision_opencv/cv_bridge/src/module.cpp:36:0:\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp: In function 'int do_numpy_import()':\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp:37:3: warning: converting to non-pointer type 'int' from NULL [-Wconversion-null]\r\n   import_array();\r\n   ^~~~~~~~~~~~\r\n/workspace/codebase/vision_opencv/cv_bridge/src/module.hpp:38:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n }\r\n ^\r\n```\r\n\r\nBut it's derived from the inherent definition for `import_array();` of numpy, so... fix this known warning to avoid error while package installation."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/221'
  title: >-
    [ROS2] Build warning and test failure of conversion.py after manual
    installation of python3-numpy and python3-opencv
  body: "This issue is migrated to track here from the failure aforementioned by @mikaelarguedas in the discussion of https://github.com/ros2/vision_opencv/issues/13\r\n\r\n> I started the work of rebasing our changes of image_geometry on top of ros-perception/vision_opencv ros2 branch a few weeks back. I have not been able to use them on our CI system yet as:\r\n>\r\n\r\n> - cv_bridge has compilation warnings\r\n> - the conversions.py test from cv_bridge fails on my machine\r\n\r\nTest Error\r\n```\r\n10: Test command: /usr/bin/python3 \"-u\" \"/root/ros2_ws/install/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py\" \"/root/ros2_overlay_ws/build/cv_bridge/test_results/cv_bridge/conversions.py.xunit.xml\" \"--package-name\" \"cv_bridge\" \"--output-file\" \"/root/ros2_overlay_ws/build/cv_bridge/ament_cmake_pytest/conversions.py.txt\" \"--command\" \"/usr/bin/python3\" \"-u\" \"-m\" \"pytest\" \"/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/test/conversions.py\" \"-o\" \"cache_dir=/root/ros2_overlay_ws/build/cv_bridge/test/ament_cmake_pytest/conversions.py/.cache\" \"--junit-xml=/root/ros2_overlay_ws/build/cv_bridge/test_results/cv_bridge/conversions.py.xunit.xml\" \"--junit-prefix=cv_bridge\"\r\n10: Test timeout computed to be: 600\r\n10: -- run_test.py: invoking following command in '/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge':\r\n10:  - /usr/bin/python3 -u -m pytest /root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/test/conversions.py -o cache_dir=/root/ros2_overlay_ws/build/cv_bridge/test/ament_cmake_pytest/conversions.py/.cache --junit-xml=/root/ros2_overlay_ws/build/cv_bridge/test_results/cv_bridge/conversions.py.xunit.xml --junit-prefix=cv_bridge\r\n10: ============================= test session starts ==============================\r\n10: platform linux -- Python 3.6.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0\r\n10: rootdir: /root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge, inifile:\r\n10: plugins: rerunfailures-4.1, repeat-0.4.1, cov-2.5.1\r\n10: collected 4 items\r\n10: \r\n10: test/conversions.py .F..                                                 [100%]\r\n10: \r\n10: =================================== FAILURES ===================================\r\n10: ______________ TestConversions.test_encode_decode_cv2_compressed _______________\r\n10: \r\n10: self = <conversions.TestConversions testMethod=test_encode_decode_cv2_compressed>\r\n10: \r\n10:     def test_encode_decode_cv2_compressed(self):\r\n10:         import numpy as np\r\n10:         # from:\r\n10:         # http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html#Mat\r\n10:         # imread(const string& filename, int flags)\r\n10:         formats = ['jpg', 'jpeg', 'jpe', 'png', 'bmp', 'dib', 'ppm', 'pgm', 'pbm',\r\n10:                    'jp2', 'sr', 'ras', 'tif', 'tiff']  # this formats rviz is not support\r\n10:     \r\n10:         cvb_en = CvBridge()\r\n10:         cvb_de = CvBridge()\r\n10:     \r\n10:         for w in range(100, 800, 100):\r\n10:             for h in range(100, 800, 100):\r\n10:                 for f in formats:\r\n10:                     for channels in ([], 1, 3):\r\n10:                         if channels == []:\r\n10:                             original = np.uint8(np.random.randint(0, 255, size=(h, w)))\r\n10:                         else:\r\n10:                             original = np.uint8(np.random.randint(0, 255, size=(h, w, channels)))\r\n10: >                       compress_rosmsg = cvb_en.cv2_to_compressed_imgmsg(original, f)\r\n10: \r\n10: test/conversions.py:78: \r\n10: _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n10: \r\n10: self = <cv_bridge.core.CvBridge object at 0x7f9e8e836d68>\r\n10: cvim = array([[215, 148, 142, ..., 116, 162, 242],\r\n10:        [242,  60, 244, ...,  84, 114, 155],\r\n10:        [ 50, 234,  48, ..., 16..., 147, 249, 159],\r\n10:        [186, 233, 250, ..., 170, 116, 158],\r\n10:        [157,  38,  84, ..., 184, 144, 137]], dtype=uint8)\r\n10: dst_format = 'jp2'\r\n10: \r\n10:     def cv2_to_compressed_imgmsg(self, cvim, dst_format='jpg'):\r\n10:         \"\"\"\r\n10:             Convert an OpenCV :cpp:type:`cv::Mat` type to a ROS sensor_msgs::CompressedImage message.\r\n10:     \r\n10:             :param cvim:      An OpenCV :cpp:type:`cv::Mat`\r\n10:             :param dst_format:  The format of the image data, one of the following strings:\r\n10:     \r\n10:             http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html\r\n10:             http://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html#Mat\r\n10:             * imread(const string& filename, int flags)\r\n10:                * bmp, dib\r\n10:                * jpeg, jpg, jpe\r\n10:                * jp2\r\n10:                * png\r\n10:                * pbm, pgm, ppm\r\n10:                * sr, ras\r\n10:                * tiff, tif\r\n10:     \r\n10:             :rtype:           A sensor_msgs.msg.CompressedImage message\r\n10:             :raises CvBridgeError: when the ``cvim`` has a type that is incompatible with ``format``\r\n10:     \r\n10:     \r\n10:             This function returns a sensor_msgs::Image message on success,\r\n10:             or raises :exc:`cv_bridge.CvBridgeError` on failure.\r\n10:             \"\"\"\r\n10:         import cv2\r\n10:         import numpy as np\r\n10:         if not isinstance(cvim, (np.ndarray, np.generic)):\r\n10:             raise TypeError('Your input type is not a numpy array')\r\n10:         cmprs_img_msg = sensor_msgs.msg.CompressedImage()\r\n10:         cmprs_img_msg.format = dst_format\r\n10:         ext_format = '.' + dst_format\r\n10:         try:\r\n10: >           cmprs_img_msg.data = np.array(cv2.imencode(ext_format, cvim)[1]).tostring()\r\n10: E           cv2.error: /build/opencv-zcaJjh/opencv-3.2.0+dfsg/modules/imgcodecs/src/loadsave.cpp:682: error: (-2) could not find encoder for the specified extension in function imencode\r\n10: \r\n10: ../../../../install/cv_bridge/lib/python3.6/site-packages/cv_bridge/core.py:240: error\r\n10: ----------------------------- Captured stderr call -----------------------------\r\n10: OpenCV Error: Unspecified error (could not find encoder for the specified extension) in imencode, file /build/opencv-zcaJjh/opencv-3.2.0+dfsg/modules/imgcodecs/src/loadsave.cpp, line 682\r\n10:  generated xml file: /root/ros2_overlay_ws/build/cv_bridge/test_results/cv_bridge/conversions.py.xunit.xml \r\n10: ===================== 1 failed, 3 passed in 147.82 seconds =====================\r\n10: -- run_test.py: return code 1\r\n10: -- run_test.py: verify result file '/root/ros2_overlay_ws/build/cv_bridge/test_results/cv_bridge/conversions.py.xunit.xml'\r\n10/11 Test #10: conversions.py ...................***Failed  148.77 sec\r\n\r\n```\r\n\r\nBuild Warning\r\n\r\n```\r\nCMake Warning at /usr/share/cmake-3.10/Modules/FindBoost.cmake:1626 (message):\r\n  No header defined for python3; skipping header check\r\nCall Stack (most recent call first):\r\n  CMakeLists.txt:20 (find_package)\r\n\r\n\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/cv_bridge.cpp: In function ‘cv_bridge::CvImageConstPtr cv_bridge::cvtColorForDisplay(const CvImageConstPtr&, const string&, cv_bridge::CvtColorForDisplayOptions)’:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/cv_bridge.cpp:631:26: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n     for (size_t j = 0; j < source->image.rows; ++j) {\r\n                        ~~^~~~~~~~~~~~~~~~~~~~\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/cv_bridge.cpp:632:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n       for (size_t i = 0; i < source->image.cols; ++i) {\r\n                          ~~^~~~~~~~~~~~~~~~~~~~\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/cv_bridge.cpp:684:30: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n         for (size_t j = 0; j < source->image.rows; ++j) {\r\n                            ~~^~~~~~~~~~~~~~~~~~~~\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/cv_bridge.cpp:685:32: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n           for (size_t i = 0; i < source->image.cols; ++i) {\r\n                              ~~^~~~~~~~~~~~~~~~~~~~\r\nIn file included from /root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.cpp:50:0:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp: In function ‘int do_numpy_import()’:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp:39:3: warning: converting to non-pointer type ‘int’ from NULL [-Wconversion-null]\r\n   import_array();\r\n   ^~~~~~~~~~~~\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp:40:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n }\r\n ^\r\nIn file included from /root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module_opencv3.cpp:18:0:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp: In function ‘int do_numpy_import()’:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp:39:3: warning: converting to non-pointer type ‘int’ from NULL [-Wconversion-null]\r\n   import_array();\r\n   ^~~~~~~~~~~~\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module.hpp:40:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n }\r\n ^\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module_opencv3.cpp: At global scope:\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/src/module_opencv3.cpp:97:19: warning: ‘PyObject* failmsgp(const char*, ...)’ defined but not used [-Wunused-function]\r\n static PyObject * failmsgp(const char * fmt, ...)\r\n                   ^~~~~~~~\r\nIn file included from /root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/test/utest.cpp:16:0:\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h: In instantiation of ‘testing::AssertionResult testing::internal::CmpHelperEQ(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = int]’:\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1429:23:   required from ‘static testing::AssertionResult testing::internal::EqHelper<lhs_is_null_literal>::Compare(const char*, const char*, const T1&, const T2&) [with T1 = unsigned int; T2 = int; bool lhs_is_null_literal = false]’\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/test/utest.cpp:32:3:   required from here\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1401:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n   if (lhs == rhs) {\r\n       ~~~~^~~~~~\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h: In instantiation of ‘testing::AssertionResult testing::internal::CmpHelperEQ(const char*, const char*, const T1&, const T2&) [with T1 = int; T2 = long unsigned int]’:\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1429:23:   required from ‘static testing::AssertionResult testing::internal::EqHelper<lhs_is_null_literal>::Compare(const char*, const char*, const T1&, const T2&) [with T1 = int; T2 = long unsigned int; bool lhs_is_null_literal = false]’\r\n/root/ros2_overlay_ws/src/ros2/vision_opencv/cv_bridge/test/utest.cpp:106:3:   required from here\r\n/root/ros2_ws/install/gtest_vendor/src/gtest_vendor/include/gtest/gtest.h:1401:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]\r\n\r\n```"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/213'
  title: buffer type issue of cv_bridge in ROS2 branch
  body: "@gaoethan Hi , Thanks for your upstream in ros2 branch , i have succeed in building and import cv_bridge in my own python tests . \r\nBut during the tests , i found that in the function : \"imgmsg_to_cv2\"  of the file /vision_opencv/cv_bridge/python/cv_bridge/core.py , the code is like this : \r\n\r\n`im = np.ndarray(shape=(img_msg.height, img_msg.width, n_channels),\r\n                           dtype=dtype, buffer=img_msg.data)`\r\n\r\nand it will report an error since the img_msg.data is of type \"list\" and the buffer needs type \"Bytes\"\r\n\r\ni change the img_msg.data to np.array(img_msg.data) and i succeed in using the bridge .\r\n\r\nSo i am wondering is there a better way to solve this bug ? Or have I missed some points in the code ?\r\n\r\nLooking forward to your opinion , thanks !\r\n\r\nBesides , i found the opencv_tests in the ros2 branch is still using catkin , but in your [another](https://github.com/gaoethan/vision_opencv/tree/ros2_cv_bridge) gits i found an ament-builded code , so i think you might missed merge the right code in opencv_tests ."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/212'
  title: Add initial porting of ros2 cv_bridge
  body: "It mainly contains the change as follows:\r\n\r\n-  C++ interfaces and lib\r\n-  python interfaces and corresponding C++ backend\r\n-  all tests\r\n-  remove boost dependence with C++11 or above instead\r\n\r\nSigned-off-by: Ethan Gao <ethan.gao@linux.intel.com>"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/208'
  title: Release into Melodic
  body: "It looks like all of the dependencies for vision_opencv are available in Melodic[1], so it would be great to release it.  Thanks in advance!\r\n\r\n[1] There is still the open question of which version of opencv we use in Melodic, ala https://github.com/ros-infrastructure/rep/issues/167, but we can get vision_opencv built against the system packages while we figure that out."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/207'
  title: fail to use function in cv_bridge
  body: "When I use some function in cv_bridge, I receive an importerror:\r\n\r\nTraceback (most recent call last):\r\nFile \"/home/yixiangw/gym-gazebo/gym_gazebo/envs/turtlebot/gazebo_circuit2c_turtlebot_camera_nn.py\", line 217, in _reset\r\ncv_image = CvBridge().imgmsg_to_cv2(image_data, \"bgr8\")\r\nFile \"/home/yixiangw/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/vision_opencv/cv_bridge/python/cv_bridge/core.py\", line 163, in imgmsg_to_cv2\r\ndtype, n_channels = self.encoding_to_dtype_with_channels(img_msg.encoding)\r\nFile \"/home/yixiangw/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/vision_opencv/cv_bridge/python/cv_bridge/core.py\", line 99, in encoding_to_dtype_with_channels\r\nreturn self.cvtype2_to_dtype_with_channels(self.encoding_to_cvtype2(encoding))\r\nFile \"/home/yixiangw/gym-gazebo/gym_gazebo/envs/installation/catkin_ws/src/vision_opencv/cv_bridge/python/cv_bridge/core.py\", line 91, in encoding_to_cvtype2\r\nfrom cv_bridge.boost.cv_bridge_boost import getCvType\r\nImportError: dynamic module does not define module export function (PyInit_cv_bridge_boost)\r\n\r\nso how can I solve it ?"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/205'
  title: can't process package cv_bridge
  body: "I'm having an issue with my catkin_make.  I receive multiple errors after \r\n`Building CXX object src/CMakeFiles/cv_bridge_boostdir/module.cpp.o`\r\n\r\nErrors:\r\n```\r\nIn file included from /usr/include/c++/4.9/cstddef:45:0,\r\n                 from /usr/include/boost/config/select_stdlib_config.hpp:18,\r\n                 from /usr/include/boost/config.hpp:40,\r\n                 from /usr/include/boost/python/detail/config.hpp:15,\r\n                 from /usr/include/boost/python/detail/prefix.hpp:14,\r\n                 from /usr/include/boost/python/args.hpp:8,\r\n                 from /usr/include/boost/python.hpp:11,\r\n                 from /home/robot/ros_catkin_ws/src/vision_opencv/cv_bridge/src/module.hpp:21,\r\n                 from /home/robot/ros_catkin_ws/src/vision_opencv/cv_bridge/src/module.cpp:35:\r\n/home/robot/ros_catkin_ws/src/vision_opencv/cv_bridge/src/module.hpp: In function 'void do_numpy_import()':\r\n/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/__multiarray_api.h:1708:35: error: return-statement with a value, in function returning 'void' [-fpermissive]\r\n #define NUMPY_IMPORT_ARRAY_RETVAL NULL\r\n                                   ^\r\n/usr/lib/python2.7/dist-packages/numpy/core/include/numpy/__multiarray_api.h:1713:151: note: in expansion of macro 'NUMPY_IMPORT_ARRAY_RETVAL'\r\n #define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, \"numpy.core.multiarray failed to import\"); return NUMPY_IMPORT_ARRAY_RETVAL; } }\r\n                                                                                                                                                       ^\r\n/home/robot/ros_catkin_ws/src/vision_opencv/cv_bridge/src/module.hpp:44:5: note: in expansion of macro 'import_array'\r\n     import_array( );\r\n     ^\r\nsrc/CMakeFiles/cv_bridge_boost.dir/build.make:54: recipe for target 'src/CMakeFiles/cv_bridge_boost.dir/module.cpp.o' failed\r\nmake[2]: *** [src/CMakeFiles/cv_bridge_boost.dir/module.cpp.o] Error 1\r\nCMakeFiles/Makefile2:918: recipe for target 'src/CMakeFiles/cv_bridge_boost.dir/all' failed\r\nmake[1]: *** [src/CMakeFiles/cv_bridge_boost.dir/all] Error 2\r\nMakefile:127: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n<== Failed to process package 'cv_bridge':\r\n  Command '['/opt/ros/kinetic/env.sh', 'make', '-j1']' returned non-zero exit status 2\r\n\r\nReproduce this error by running:\r\n==> cd /home/robot/ros_catkin_ws/build_isolated/cv_bridge && /opt/ros/kinetic/env.sh make -j1\r\n\r\n```\r\n\r\nI'm running Debian Jessy on a Raspberry Pi."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/203'
  title: Upstream and maintain ROS2 cv_bridge
  body: "ROS2 is the next newer ROS and we have already ported [ROS2 cv_bridge](https://github.com/gaoethan/vision_opencv/tree/ros2_cv_bridge) for ROS2 on the basis of forking from the ROS kenetic branch. you know, cv_bridge is important to use ROS with OpenCV and we intend to upstream this ROS2 porting to benefit more ROS2 users to use OpenCV in their perception applications. and we had a simple thread to talking this within ROS2 forking of vision_opencv before (you can find the details [HERE](https://github.com/ros2/vision_opencv/issues/12)).\r\nGenerally we can consider the following options:\r\n\r\n-     Option 1: maintain a separate project under the umbrella of ROS2\r\n-     Option 2: create a ROS2 branch in ROS vision_opencv and merge back the ROS2 porting accordingly\r\n-     Option 3: Self-maintain if no buy-in\r\n-     Option 4: ???\r\n\r\nI'm here to check with your comments to this upstream @vrabaud  ? Obviously, I have to agree that it increases the work to maintain ROS and ROS2 at the same time, so I'm not sure how do you think of this upstream and please share your comments, thanks a lot !"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/202'
  title: 'cv_bridge: numpy test_depend or not?'
  body: "Here `python-numpy` is listed as a test_depend:\r\nhttps://github.com/ros-perception/vision_opencv/blob/9d49971aa9b32a662a91d9240d8a8b46dc60ca90/cv_bridge/package.xml#L35\r\n\r\nWhile here it is required outside of test code:\r\nhttps://github.com/ros-perception/vision_opencv/blob/9d49971aa9b32a662a91d9240d8a8b46dc60ca90/cv_bridge/src/CMakeLists.txt#L25\r\n"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/196'
  title: Unable to import cv2 and cvbridge in python3
  body: "**Environment**\r\nUbuntu 16.04\r\nPython 3.5.2\r\nRos Distribution-Kinetic\r\n\r\nRos was installed as per installation instruction (sudo apt-get install ros-kinetic-full-desktop.)\r\nAnd to make the Python3 as default version, I followed the necessary and sufficient step of install python3 versions of rospkg and catkin(sudo pip3 install rospkg catkin_pkg).After which i am able to import cv2 in python2 but  not in python3 as below\r\n**ImportError: /opt/ros/kinetic/lib/python2.7/dist-packages/cv2.so: undefined symbol: PyCObject_Type**\r\n\r\nTo solve this I install the opencv3 with (pip3 install opencv-python) and then force a symbolic link as mentioned [here](https://stackoverflow.com/questions/43019951/after-install-ros-kinetic-cannot-import-opencv)\r\nBut then i am unable to import cv_bridge\r\n\r\nSo whats the right way to install ROS such that the python version is python3 and am able to import opencv and corresponding dependencies"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/pull/183'
  title: specify requied components of opencv
  body: "now the generated pkgconfig file with contain the correct dependencies.\r\n\r\nI was using this from another project and it was slowing down my linking stage."
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []
- url: 'https://github.com/ros-perception/vision_opencv/issues/182'
  title: PinholeCameraModel() doesn't import in Python
  body: "Ubuntu 16.04, Kinetic installation.\r\n\r\nTrying to import the PinholeCamera() model in Python, using:\r\n\r\n    from image_geometry import PinholeCameraModel\r\n\r\nThis gives an error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/simonbirrell/catkin_ws/src/vegebot/lettuce_detect/nodes/lettuce_detector\", line 16, in <module>\r\n    from image_geometry import PinholeCameraModel\r\nImportError: cannot import name PinholeCameraModel\r\n```\r\n\r\nThis guy appears to have the same problem:\r\nhttp://answers.ros.org/question/209953/image_geometry-pinholecameramodel-python-not-importing-properly-when-installed-using-debian-package/\r\n\r\nFollowing his suggestion I tried putting the image_geometry package in catkin_ws/src and compiling with catkin_make, but got the following:    \r\n\r\n```\r\nCMake Error at /home/simonbirrell/catkin_ws/devel/share/image_geometry/cmake/image_geometryConfig.cmake:106 (message):\r\n  Project 'image_geometry' specifies\r\n  '/home/simonbirrell/catkin_ws/src/image_geometry/include' as an include\r\n  dir, which is not found.  It does neither exist as an absolute directory\r\n  nor in\r\n  '/home/simonbirrell/catkin_ws/src/image_geometry//home/simonbirrell/catkin_ws/src/image_geometry/include'.\r\n  Ask the maintainer 'Vincent Rabaud <vincent.rabaud@gmail.com>' to fix it.\r\nCall Stack (most recent call first):\r\n  /opt/ros/kinetic/share/catkin/cmake/catkinConfig.cmake:76 (find_package)\r\n  vegebot/lettuce_detect/CMakeLists.txt:7 (find_package)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\n```\r\n\r\nAny thoughts on a workaround or proper fix?\r\n\r\nThanks\r\n\r\nSimon"
  repo: 'https://api.github.com/repos/ros-perception/vision_opencv'
  labels: []

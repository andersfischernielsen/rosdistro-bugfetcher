- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/362'
  title: 'uuv_descriptions: add xacro as a runtime dependency'
  body: >-
    If xacro is not installed then it is not possible to spawn ROVs using
    upload_rexrov.launch.
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/360'
  title: Camera only sees seabed when perpendicular to it
  body: "Hello all, \r\n\r\nI'm currently having problems to see the seabed texture of the ocean_box model on my camera.\r\n\r\nI've played around with the camera position and it seems that the camera only renders the texture when it is pointing directly to the ground. \r\n\r\nSee these pictures:\r\n![Screenshot from 2019-05-10 13-03-49](https://user-images.githubusercontent.com/8384920/57523606-b5a53c80-7325-11e9-9432-3f3072864841.png)\r\nRotating camera to be appox. perpendicular:\r\n![Screenshot from 2019-05-10 13-22-22](https://user-images.githubusercontent.com/8384920/57523983-ca360480-7326-11e9-8de0-e37ab08146e9.png)\r\n\r\nAlso, depending on the camera position, Gazebo GUI client only renders blue. You can see the effect on the image below.\r\n\r\n![Screenshot from 2019-05-10 13-04-15](https://user-images.githubusercontent.com/8384920/57523607-b5a53c80-7325-11e9-96cc-8d622273087d.png)\r\n\r\nIt is probably not a uuv_simulator problem, but I want to know if you have noticed that already and whether you have any workaround for this. Since my application is a crawler, it will be all the time on the ground and would be awesome if we could see the ground texture on the image. \r\n\r\nThanks!"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/343'
  title: Hotfix/update gazebo dependency
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/342'
  title: uuv_description does not build in debs on Kinetic
  body: "It looks like a missing dependency on gazebo.\r\n\r\nhttp://build.ros.org/view/Kbin_uX64/job/Kbin_uX64__uuv_descriptions__ubuntu_xenial_amd64__binary/15/console\r\n```\r\nCMake Error at CMakeLists.txt:9 (find_package):\r\n  By not providing \"Findgazebo.cmake\" in CMAKE_MODULE_PATH this project has\r\n  asked CMake to find a package configuration file provided by \"gazebo\", but\r\n  CMake did not find one.\r\n\r\n  Could not find a package configuration file provided by \"gazebo\" with any\r\n  of the following names:\r\n\r\n    gazeboConfig.cmake\r\n    gazebo-config.cmake\r\n\r\n  Add the installation prefix of \"gazebo\" to CMAKE_PREFIX_PATH or set\r\n  \"gazebo_DIR\" to a directory containing one of the above files.  If \"gazebo\"\r\n  provides a separate development package or SDK, be sure it has been\r\n  installed.\r\n```\r\n\r\n"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/341'
  title: launch files missing for the quick start manual
  body: "Hello!\r\nIt seems that some of the launch files in uuv_simulator/uuv_descriptions/launch  are missing. \r\nFor instance \"empty_underwater_world.launch\". But they seem to be there if you do \r\ncd catkin_ws/src/uuv_simulator\r\ngit checkout 5878f11\r\n\r\nIt would be nice to commit the descriptions in the tutorials to the latest version. \r\n:)"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
    - documentation
    - update
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/340'
  title: Failed to show texture in new seabed
  body: "Following the tutorial \"making a simple seabed\" (https://uuvsimulator.github.io/tutorials/seabed_world.html), the texture is not appearing properly. I think there is more to do in the Blender when exporting the mesh to Collada DAE file for the Gazebo world. Indeed, it can be seen in the tutorial page that the sand.material is used for a texture but when its imported in Gazebo, it is no where close to the the texture file given in sand.material. I think there are two things to be considered: 1) If the mesh grid is too small, the texture won't appear properly. The fine grid is due to the interpolation applied in the python script (see tutorial page); 2) The material scaling should be applied properly.\r\n\r\nTo this end, I have performed multiple tests in using different settings but cannot get the texture applied to the tutorial mesh (above weblink) similar to the world_models/height_sandmap. I request to please include few more steps or provide some guidance in the tutorial page or in repose to this issue about how the texture can appropriately can be applied on the tutorial seabed mesh created using Python scripts to be visualize appropriately in the Gazebo. \r\n\r\nI think that the answer to this issue will be helpful to all other who have less experience with Blender and are trying to create world files with appropriate texture visualizing the uuv_simulator environment.   "
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - documentation
    - update
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/336'
  title: Hotfix/fix sensor dependencies
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/335'
  title: Simulation with multiple slender bodies
  body: "Hi,\r\n\r\nI am trying to use UUV Sim to simulate some passive robots (without any thruster) in underwater environments. But I am getting several errors.\r\n\r\nMy robots have slender body properties. Normally, they have shapes similar to a torpedo, but for simplification, I model them as boxes in urdf files. All of their parameters (mass, volume, etc.) are calculated according to their actual shape. I am using strip theory(slender body approximation) & method of equivalent ellipsoid to determine the 3D added mass coefficients. The damping coefficients are disregarded.\r\n\r\nI am posting 2 example robot configurations here.\r\n\r\n**Robot1:**\r\nnamespace: robot1\r\nmaximumRadius: 0.025\r\nagentLength: 0.265\r\nagentMass: 0.518532\r\nagentVolume: 0.000503964\r\ncenterOfGravity: 0.126807\r\ncenterOfBuoyancy: 0.128401\r\ninertiaXX: 0.000247974\r\ninertiaYY: 0.00372173\r\ninertiaZZ: 0.00372173\r\naddedMass11: 0.028014\r\naddedMass22: 0.520733\r\naddedMass26: 0.00143208\r\naddedMass55: 4.61259e-07\r\n\r\n**Robot2:**\r\nnamespace: robot2 \r\nmaximumRadius: 0.0284\r\nagentLength: 0.38\r\nagentMass: 0.337542\r\nagentVolume: 0.00029536\r\ncenterOfGravity: 0.272673\r\ncenterOfBuoyancy: 0.288764\r\ninertiaXX: 0.000132158\r\ninertiaYY: 0.0027912\r\ninertiaZZ: 0.0027912\r\naddedMass11: 0.0116095\r\naddedMass22: 0.305304\r\naddedMass26:  0.000560879\r\naddedMass55: -4.22343e-05\r\n\r\n\r\nI used _auv_underwater_world.launch_ in package _uuv_gazebo_worlds_ for tests. I start the gazebo world, spawn robots beneath the surface and observe their movements.\r\n\r\n**Test scenario 1:** Simulation with single robot\r\nIt works perfectly when I run the simulation with robot1. However, if I use robot2, it starts normally, but gets unstable after a while and I get one of the following errors each time:\r\n\r\n```\r\n***** Internal Program Error - assertion (!std::isnan(tau.norm())) failed in virtual void gazebo::HMFossen::ApplyHydrodynamicForces(double, const Vector3d&):\r\n/home/user/catkin_ws/src/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/src/HydrodynamicModel.cc(417): Hydrodynamic forces vector is nan\r\nError [Param.cc:452] Unable to set value [inf -0.6 -inf 3.14159 1.51221 3.14159] for key[pose]\r\nError [Param.cc:452] Unable to set value [inf -0.6 -inf 0 0.772249 0] for key[pose]\r\n```\r\n```\r\n***** Internal Program Error - assertion (!std::isnan(linearAccel) && !std::isnan(angularAccel)) failed in virtual void gazebo::UnderwaterObjectPlugin::Update(const gazebo::common::UpdateInfo&):\r\n/home/user/catkin_ws/src/uuv_simulator/uuv_gazebo_plugins/uuv_gazebo_plugins/src/UnderwaterObjectPlugin.cc(210): Linear or angular accelerations are invalid.\r\nError [Param.cc:452] Unable to set value [-inf inf -inf 3.14159 0.650865 3.14159] for key[pose]\r\nError [Param.cc:452] Unable to set value [-inf inf -inf -3.1406 0.987751 3.13399] for key[pose]\r\ngzclient: /usr/include/OGRE/OgreAxisAlignedBox.h:252: void Ogre::AxisAlignedBox::setExtents(const Ogre::Vector3&, const Ogre::Vector3&): Assertion `(min.x <= max.x && min.y <= max.y && min.z <= max.z) && \"The minimum corner of the box must be less than or equal to maximum corner\"' failed.\r\nAborted (core dumped)\r\n```\r\n\r\n**Test scenario 2:** Simulation with multiple robots\r\nNo matter which robot configuration I use, the simulation crashes always with one of the errors above.\r\n\r\n\r\nThe second situation is more important for me, because I must run the simulation with multiple robots in my work.\r\n\r\nThanks in advance!\r\n\r\n\r\n**default.xacro**\r\n```xacro\r\n<?xml version=\"1.0\"?>\r\n<robot name=\"ea_robot\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\" >\r\n  \r\n  <!-- \r\n  \tTHERE ARE SIMILAR xacro:arg AND xacro:property. BECAUSE, xacro:arg is a local value\r\n  \tbut xacro:property is a global value i.e. xacro:property can be used in the included\r\n  \tfiles whereas the xacro:arg can only be used in the declared file. AGAIN, only xacro:arg\r\n  \tcan be set through passing value from outside whereas the xacro:property is only be set inside \r\n  \tthe file.\r\n    -->\r\n  \r\n  <!-- ===== XACRO ARGUMENTS ========== -->\r\n\r\n  <!-- TODO: set defaults -->\r\n  \r\n  <xacro:arg name=\"debug\" default=\"0\"/>\r\n  <xacro:arg name=\"namespace\" default=\"ea_robot\"/>\r\n  \r\n  <!-- biggest radius - used for bounding box in gazebo.xacro -->\r\n  <xacro:arg name=\"maximumRadius\" default= '0' />\r\n\r\n  <!-- legth of agent -->\r\n  <xacro:arg name=\"agentLength\" default= '0' />      \r\n\r\n  <!-- mass of agent -->\r\n  <xacro:arg name=\"agentMass\" default= '0' />\r\n\r\n  <!-- volume of agent -->\r\n  <xacro:arg name=\"agentVolume\" default= '0' />\r\n    \r\n  <!-- center of gravity -->\r\n  <xacro:arg name=\"centerOfGravity\" default= '0 0 0' />\r\n\r\n  <!-- center of buoyancy -->\r\n  <xacro:arg name=\"centerOfBuoyancy\" default= '0 0 0' />\r\n\r\n  <!-- Inertia Ixx of agent -->\r\n  <xacro:arg name=\"inertiaXX\" default= '0' />\r\n\r\n  <!-- Inertia Iyy of agent -->\r\n  <xacro:arg name=\"inertiaYY\" default= '0' />\r\n\r\n  <!-- Inertia Izz of agent -->\r\n  <xacro:arg name=\"inertiaZZ\" default= '0' />\r\n\r\n  <!-- Added-mass-matrix coefficients of agent -->\r\n  <xacro:arg name=\"addedMass11\" default= '0' />\r\n  <xacro:arg name=\"addedMass22\" default= '0' />\r\n  <xacro:arg name=\"addedMass26\" default= '0' />\r\n  <xacro:arg name=\"addedMass55\" default= '0' />\r\n    \r\n  <!-- fulid density of liquid in the environment -->\r\n  <xacro:arg name=\"fluidDensity\" default= '1024.0' />\r\n\r\n\r\n\r\n    <!-- \r\n  ============================================================================\r\n  ============================================================================\r\n   -->\r\n  \r\n  \r\n  <!-- ===== XACRO PROPERTIES ==========\r\n    Vehicle's parameters (remember to enter the model parameters below)\r\n  -->\r\n  <!-- biggest radius - used for bounding box in gazebo.xacro -->\r\n  <xacro:property name=\"maxRadius\" value=\"$(arg maximumRadius)\"/>\r\n  <!-- length of agent -->\r\n  <xacro:property name=\"length\" value=\"$(arg agentLength)\"/>\r\n  <!-- mass of ea_robot -->\r\n  <xacro:property name=\"mass\" value=\"$(arg agentMass)\"/>\r\n  <!-- volume of ea_robot -->\r\n  <xacro:property name=\"volume\" value=\"$(arg agentVolume)\"/>\r\n  <!-- Center of gravity -->\r\n  <xacro:property name=\"cog\" value=\"$(arg centerOfGravity)\"/>\r\n  <!-- Center of buoyancy -->\r\n  <xacro:property name=\"cob\" value=\"$(arg centerOfBuoyancy)\"/>\r\n  <!-- Inertia Ixx of agent -->\r\n  <xacro:property name=\"Ixx\" value=\"$(arg inertiaXX)\"/>\r\n  <!-- Inertia Iyy of agent -->\r\n  <xacro:property name=\"Iyy\" value=\"$(arg inertiaYY)\"/>\r\n  <!-- Inertia Izz of agent -->\r\n  <xacro:property name=\"Izz\" value=\"$(arg inertiaZZ)\"/>\r\n\r\n  <!-- Added-mass-matrix coefficients of agent -->\r\n  <xacro:property name=\"amm11\" value=\"$(arg addedMass11)\"/>\r\n  <xacro:property name=\"amm22\" value=\"$(arg addedMass22)\"/>\r\n  <xacro:property name=\"amm26\" value=\"$(arg addedMass26)\"/>\r\n  <xacro:property name=\"amm55\" value=\"$(arg addedMass55)\"/>\r\n  \r\n  <!-- Fluid density -->\r\n  <xacro:property name=\"rho\" value=\"$(arg fluidDensity)\"/>\r\n  \r\n\r\n  <!-- \r\n  ============================================================================\r\n  ============================================================================\r\n   -->\r\n  \r\n  \r\n  <!-- Include the ROV macro file -->\r\n  <xacro:include filename=\"$(find ea_robot_description)/urdf/base.xacro\"/>\r\n  <xacro:include filename=\"$(find ea_robot_description)/urdf/gazebo.xacro\"/>\r\n\r\n  <!-- Create the ea_robot -->\r\n  <xacro:ea_robot_base namespace=\"$(arg namespace)\">\r\n    <!-- The underwater object plugin is given as an input block parameter to\r\n     allow the addition of external models of manipulator units -->\r\n    <gazebo>\r\n      <plugin name=\"uuv_plugin\" filename=\"libuuv_underwater_object_ros_plugin.so\">\r\n        <fluid_density>${rho}</fluid_density>\r\n        <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>\r\n        <debug>$(arg debug)</debug>\r\n        <!-- Adding the hydrodynamic and hydrostatic parameters for the vehicle-->\r\n        <xacro:ea_robot_hydro_model namespace=\"$(arg namespace)\"/>\r\n        <!--\r\n          In case other modules are added to the vehicle (such as a manipulator)\r\n          that also have link running with the underwater object plugin, they\r\n          should also be added in this block. For this, this new module should\r\n          have a file similar to gazebo.xacro above with the description of the\r\n          parameter necessary for the underwater object plugin to be initialized.\r\n        -->\r\n      </plugin>\r\n    </gazebo>\r\n  </xacro:ea_robot_base>\r\n\r\n  <!-- Joint state publisher plugin -->\r\n  <xacro:default_joint_state_publisher namespace=\"$(arg namespace)\" update_rate=\"10\"/>\r\n\r\n</robot>\r\n\r\n```\r\n**base.xacro**\r\n```xacro\r\n<?xml version=\"1.0\"?>\r\n<robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\">\r\n  <!-- Loading some constants -->\r\n  <xacro:include filename=\"$(find uuv_descriptions)/urdf/common.urdf.xacro\"/>\r\n  <!-- Loading file with sensor macros -->\r\n  <xacro:include filename=\"$(find uuv_sensor_ros_plugins)/urdf/sensor_snippets.xacro\"/>\r\n  <!-- Loading the UUV simulator ROS plugin macros -->\r\n  <xacro:include filename=\"$(find uuv_gazebo_ros_plugins)/urdf/snippets.xacro\"/>  \r\n  <!-- Loading vehicle's specific macros -->\r\n  <xacro:include filename=\"$(find ea_robot_description)/urdf/snippets.xacro\"/>\r\n\r\n  <!--\r\n    Visual mesh file for the vehicle, usually in DAE (Collada) format. Be sure to store the\r\n    mesh with the origin of the mesh on the same position of the center of mass, otherwise\r\n    the mesh pose will have to be corrected below in the <visual> block.\r\n    Open the meshes for the RexROV vehicle in Blender to see an example on the mesh placement.\r\n  -->\r\n  <!--  TODO: filepath\r\n  <xacro:property name=\"visual_mesh_file\" value=\"file://$(find ea_robot_description)/meshes/vehicle.dae\"/>\r\n  -->\r\n  \r\n  <!-- Collision geometry mesh, usually in STL format (it is recommended to keep\r\n  this geometry as simple as possible to improve the performance the physics engine\r\n  regarding the computation of collision forces) -->\r\n  <!-- TODO: filepath\r\n  <xacro:property name=\"collision_mesh_file\" value=\"file://$(find ea_robot_description)/meshes/vehicle.stl\"/>\r\n  -->\r\n  \r\n  <!-- Vehicle macro -->\r\n  <xacro:macro name=\"ea_robot_base\" params=\"namespace *gazebo\">\r\n\r\n\r\n    <link name=\"dummy\">\r\n      <inertial>\r\n\t<mass value=\"${mass}\"/>\r\n\t<origin xyz=\"${cog} 0 0\" rpy=\"0 0 0\"/>\r\n\t<inertia ixx=\"${Ixx}\" ixy=\"0\" ixz=\"0\" iyy=\"${Iyy}\" iyz=\"0\" izz=\"${Izz}\"/>\r\n      </inertial>\t\r\n    </link>\r\n\r\n    <link name=\"${namespace}/base_link\">\r\n      <visual>\r\n\t<origin xyz=\"${length/2} 0 0\" rpy=\"0 0 0\"/>\r\n\t<geometry>\r\n\t  <!-- <mesh filename=\"${visual_mesh_file}\"/> -->\r\n\t  <!-- simplification - bounding box -->\r\n\t  <box size=\"${length} ${maxRadius} ${maxRadius}\"/>\r\n\t</geometry>\r\n\t<material name=\"ea_white\">\r\n\t  <color rgba=\"1 1 1 1\"/>\r\n\t</material>\r\n      </visual>\r\n\t\r\n      <collision>\r\n\t<origin xyz=\"${length/2} 0 0\" rpy=\"0 0 0\"/>\r\n\t<geometry>\r\n\t  <!-- <mesh filename=\"${collision_mesh_file}\"/> -->\r\n\t  <!-- simplification - bounding box -->\r\n\t  <box size=\"${length} ${maxRadius} ${maxRadius}\"/>\r\n\t</geometry>\r\n      </collision>\r\n\t\r\n      <!-- <inertial> -->\r\n      <!-- \t<mass value=\"${mass}\"/> -->\r\n      <!-- \t<origin xyz=\"${cog} 0 0\" rpy=\"0 0 0\"/> -->\r\n      <!-- \t<inertia ixx=\"${Ixx}\" ixy=\"0\" ixz=\"0\" iyy=\"${Iyy}\" iyz=\"0\" izz=\"${Izz}\"/> -->\r\n      <!-- </inertial>\t -->\r\n    </link>\r\n\r\n    <joint name=\"dummy_joint\" type=\"fixed\">\r\n      <parent link=\"${namespace}/base_link\"/>\r\n      <child link=\"dummy\"/>\r\n    </joint>\r\n\t\r\n    <gazebo reference=\"${namespace}/base_link\">\r\n      <selfCollide>false</selfCollide>\r\n    </gazebo>\r\n\r\n    <!-- Set up hydrodynamic plugin given as input parameter -->\r\n    <xacro:insert_block name=\"gazebo\"/>\r\n\r\n    <!-- Include the sensor modules -->\r\n\r\n<!--TODO edit sensors.xacro    <xacro:include filename=\"$(find ea_robot_description)/urdf/sensors.xacro\"/> -->\r\n\r\n  </xacro:macro>\r\n\r\n</robot>\r\n\r\n```\r\n\r\n**gazebo.xacro**\r\n```xacro\r\n<?xml version=\"1.0\"?>\r\n<robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\">\r\n\r\n  <xacro:macro name=\"ea_robot_hydro_model\" params=\"namespace\">\r\n    <!-- List of hydrodynamic models this robot's links -->\r\n    <link name=\"${namespace}/base_link\">\r\n      <!-- This flag will make the link neutrally buoyant -->\r\n      <neutrally_buoyant>0</neutrally_buoyant>\r\n\r\n      <!-- Link's volume -->\r\n      <volume>${volume}</volume>\r\n\r\n      <!-- Link's bounding box, it is used to recalculate the immersed\r\n           volume when close to the surface.\r\n           This is a workaround the invalid bounding box given by Gazebo-->\r\n      <box>\r\n        <width>${maxRadius}</width>\r\n        <length>${length}</length>\r\n        <height>${maxRadius}</height>\r\n      </box>\r\n\r\n      <!-- Center of buoyancy := relative to center of gravity-->\r\n      <center_of_buoyancy>${cob-cog}</center_of_buoyancy>\r\n\r\n      <!--\r\n        Choose one of the hydrodynamic models below, all are based on\r\n        Fossen's equation of motion for underwater vehicles\r\n\r\n        Reference:\r\n        [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion\r\n            control. John Wiley & Sons, 2011.\r\n      -->\r\n\r\n      <!-- 1) Fossen's equation of motion -->\r\n      <hydrodynamic_model>\r\n        <type>fossen</type>\r\n        <added_mass>\r\n\t  ${amm11}      0           0       0       0          0\r\n\t      0     ${amm22}        0       0       0      ${amm26}\r\n\t      0         0       ${amm22}    0   -${amm26}      0\r\n\t      0         0           0       0       0          0\r\n\t      0         0      -${amm26}    0    ${amm55}      0\r\n\t      0     ${amm26}        0       0       0      ${amm55}\r\n        </added_mass>\r\n\r\n        <!--\r\n            The linear damping coefficients can be provided as a diagonal (6 elements)\r\n            or a full matrix (36 coefficients), like the added-mass coefficients above\r\n        -->\r\n\t<!-- \r\n\t<linear_damping>\r\n             0 0 0 0 0 0\r\n        </linear_damping> \r\n\t-->\r\n        <!--\r\n            The linear damping coefficients proportional to the forward speed\r\n            can be provided as a diagonal (6 elements) or a full matrix (36 coefficients),\r\n            like the added-mass coefficients above.\r\n            This matrix is mostly useful for slender bodies (e.g. AUVs with torpedo shape)\r\n        -->\r\n        <!-- <linear_damping_forward_speed>\r\n             0 0 0 0 0 0\r\n             </linear_damping_forward_speed> -->\r\n        <!--\r\n            The quadratic damping coefficients can be provided as a diagonal (6 elements)\r\n            or a full matrix (36 coefficients), like the added-mass coefficients above\r\n        -->\r\n\t<!--\r\n\t<quadratic_damping>\r\n             0 0 0 0 0 0\r\n        </quadratic_damping>\r\n\t-->\r\n      </hydrodynamic_model>\r\n    </link>\r\n  </xacro:macro>\r\n</robot>\r\n\r\n```"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/330'
  title: Hotfix/fixing dependencies for buildfarm
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/317'
  title: Hotfix/fix release dependencies
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/316'
  title: Revert "Add uuv_descriptions test depend to uuv_gazebo_ros_plugins"
  body: 'Reverts uuvsimulator/uuv_simulator#310'
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/312'
  title: spawn_model has no file ending
  body: "Hello,\r\n\r\nI have stumbled about the renaming of spawn_model.py to spawn_model. It is in fact a python module, and now it has no file ending. This looks for me like a mistake, or is there a reason for this.\r\nHere spawn_model.py is deleted and the renaming in the launch files are done: https://github.com/uuvsimulator/uuv_simulator/commit/bf65a9283b2d057ca9442ae7389161a09affea24\r\n\r\nBest regards\r\n\r\nArtur Miller"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/310'
  title: Add uuv_descriptions test depend to uuv_gazebo_ros_plugins
  body: 'Missing a test dependency here, was unable to run tests (isolated)'
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/304'
  title: '''start_waypoint_list'' service not complete'
  body: "First - this simulator is amazing, thank you so much for making this open source. It is a great help for my research.\r\n\r\nI am trying to send waypoints to the rexrov from an external waypoints package, that I use to control my surface vessels.\r\nThe issue is the backend for the 'start_waypoint_list' service is not complete. When calling this service with the correct fields it comes up with:\r\n```\r\nrospy responded with an error: error processing request: object() takes no parameters\r\n```\r\nThis error comes from uuv_control/uuv_trajectory_control/src/uuv_control_interfaces/dp_controller_local_planner.py, on line 503:\r\n```python\r\nreturn InitWaypointSet(True)\r\n```\r\nWhere it should be:\r\n```python\r\nreturn InitWaypointSetResponse(True)\r\n```\r\nHowever the rest of the function, 'start_waypoint_list' on line 492 isn't complete.\r\n\r\nI've adapted the internals from 'init_waypoints_from_file' (line 653) and it works fine. I've also added interpolator to InitWaypointSet.srv in uuv_control_msgs.\r\n\r\nIf you are happy with these changes and it doesn't mess with anything else, i'll close this issue and lodge a pull request.\r\n\r\nThanks!\r\n\r\nThe adapted function looks like:\r\n```python\r\n    def start_waypoint_list(self, request):\r\n        \"\"\"\r\n        Service callback function to follow a set of waypoints\r\n        Args:\r\n            request (InitWaypointSet)\r\n        \"\"\"\r\n        if len(request.waypoints) == 0:\r\n            self._logger.error('Waypoint list is empty')\r\n            return InitWaypointSetResponse(False)\r\n        t = rospy.Time(request.start_time.data.secs, request.start_time.data.nsecs)\r\n        if t.to_sec() < rospy.get_time() and not request.start_now:\r\n            self._logger.error('The trajectory starts in the past, correct the starting time!')\r\n            return InitWaypointSetResponse(False)\r\n        else:\r\n            self._logger.info('Start waypoint trajectory now!')\r\n        self._lock.acquire()\r\n        # Create a waypoint set\r\n        wp_set = uuv_waypoints.WaypointSet(\r\n            inertial_frame_id=self.inertial_frame_id)\r\n        # Create a waypoint set message, to fill wp_set\r\n        waypointset_msg = WaypointSet()\r\n        waypointset_msg.header.stamp = rospy.get_time()\r\n        waypointset_msg.header.frame_id = self.inertial_frame_id\r\n        if request.start_now:\r\n            waypointset_msg.start_time = rospy.get_time()\r\n        else:\r\n            waypointset_msg.start_time = t.to_sec()\r\n        waypointset_msg.waypoints = request.waypoints\r\n        wp_set.from_message(waypointset_msg)\r\n        wp_set = self._transform_waypoint_set(wp_set)\r\n        wp_set = self._apply_workspace_constraints(wp_set)\r\n\r\n        if self._traj_interpolator.set_waypoints(wp_set, self.get_vehicle_rot()):\r\n            self._station_keeping_center = None\r\n            self._traj_interpolator.set_start_time((t.to_sec() if not request.start_now else rospy.get_time()))\r\n            self._update_trajectory_info()\r\n            self.set_station_keeping(False)\r\n            self.set_automatic_mode(True)\r\n            self.set_trajectory_running(True)\r\n            self._idle_circle_center = None\r\n            self._smooth_approach_on = True\r\n            self._logger.info('============================')\r\n            self._logger.info('      WAYPOINT SET          ')\r\n            self._logger.info('============================')\r\n            self._logger.info('Interpolator = ' + request.interpolator.data)\r\n            self._logger.info('# waypoints = %d' % self._traj_interpolator.get_waypoints().num_waypoints)\r\n            self._logger.info('Starting time = %.2f' % (t.to_sec() if not request.start_now else rospy.get_time()))\r\n            self._logger.info('Inertial frame ID = ' + self.inertial_frame_id)\r\n            self._logger.info('============================')\r\n            self._lock.release()\r\n            return InitWaypointSetResponse(True)\r\n        else:\r\n            self._logger.error('Error occurred while parsing waypoints')\r\n            self._lock.release()\r\n            return InitWaypointSetResponse(False)\r\n```\r\n"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/301'
  title: Fix casing for gazebo and eigen3 dependencies in CMakeLists
  body: >-
    The casing of a few of the non-catkin dependencies listed in the
    CMakeList.txt for a few of the packages has the wrong casing and is thus
    causing some cmake warnings.
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/295'
  title: Hotfix/sf controller quaternion error
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/294'
  title: ADD UUV Gazebo ROS libraries to be exported
  body: "Signed-off-by: Musa Morena Marcusso Manhaes <Musa.Marcusso@de.bosch.com>\r\n\r\n* ADD Sensor plugin libraries to the list of exported libraries\r\n* Fix to issue #293 "
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/293'
  title: Include ROSBaseModelPlugin
  body: "Hello,\r\n\r\nI am currently writing a custom gazebo sensor plugin. For that, I want my plugin to inherit from ROSBaseModelPlugin from the uuv_sensor_ros_plugins package. Unfortunately that isn't possible. I get the error message:\r\n\"[Plugin.hh:165] Failed to load plugin {myplugin}: {mypluginpath}: undefined symbol: _ZTIN6gazebo18ROSBaseModelPluginE\"\r\nThe problem is that the uuv_sensor_ros_plugins package doesn't export the library. This could be solved by adapting the CMakeLists.txt file.\r\n(ROSBaseSensorPlugin should also be exported)\r\n\r\nBest regards"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/290'
  title: Hotfix/kinematics interfaces tests
  body: 'Changes to solve problem on running unittests presented in #286 '
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/289'
  title: Hotfix/quaternion fix
  body: >-
    Testing the angle between quaternions to guarantee generation of the
    trajectory using the shortest path.
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/283'
  title: urdf_parser is outdated and overrides installed urdf_parser_py
  body: "The \"baked-in\" version of urdf-parser py is outdated and does not correctly parse urdf files;\r\nthe new version of urdf_parser_py https://github.com/ros/urdf_parser_py has the `hardwareInterface` tag in` <joint>` instead of <actuator> among other things\r\n\r\nuuv installs a urdf_parser_py module here:\r\nhttps://github.com/uuvsimulator/uuv_simulator/blob/master/uuv_manipulators/uuv_manipulators_commons/uuv_manipulators_kinematics/setup.py#L21\r\n\r\nthis is what it installs (compare to https://github.com/ros/urdf_parser_py)\r\nhttps://github.com/uuvsimulator/uuv_simulator/tree/master/uuv_manipulators/uuv_manipulators_commons/uuv_manipulators_kinematics/src/urdf_parser_py\r\n\r\nwithout sourcing uuv workspace:\r\n```python\r\nimport urdf_parser_py\r\nprint urdf_parser_py\r\n# <module 'urdf_parser_py' from '/opt/ros/kinetic/lib/python2.7/dist-packages/urdf_parser_py/__init__.pyc'>\r\n```\r\nwith sourcing uuv_workspace:\r\n```python\r\nimport urdf_parser_py\r\nprint urdf_parser_py\r\n# <module 'urdf_parser_py' from 'xxxxx/uuv_ws/install/lib/python2.7/dist-packages/urdf_parser_py/__init__.pyc'>\r\n```\r\nI imagine the same should be done for kdl:\r\nuuv is carrying an outdated kdl package that might want to be updated to:\r\n~https://github.com/gt-ros-pkg/hrl-kdl/tree/indigo-devel/pykdl_utils/src/pykdl_utils~\r\nhttps://github.com/ros/kdl_parser\r\n"
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels: []
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/276'
  title: Hotfix/init waypoint file response
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/273'
  title: Set the Casadi package as an optional dependency
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/266'
  title: New GPS sensor plugin without dependency from Gazebo's GPS sensor plugin
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - enhancement
- url: 'https://github.com/uuvsimulator/uuv_simulator/issues/264'
  title: >-
    Fix computation of added mass and nonlinear damping coefficients for
    spheroids
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug
- url: 'https://github.com/uuvsimulator/uuv_simulator/pull/263'
  title: Hotfix/actuator unit tests
  body: ''
  repo: 'https://api.github.com/repos/uuvsimulator/uuv_simulator'
  labels:
    - bug

- url: 'https://github.com/locusrobotics/catkin_virtualenv/issues/35'
  title: Support VCS requirements
  body: "Consider a package defining a requirement in editable format (as documented [here](https://pip.readthedocs.io/en/1.1/requirements.html#requirements-file-format)):\r\n```\r\n-e git+https://github.com/timtadh/pyflwor.git@f3861f73b2bf6106a0363c15d5de040d8b01d50f#egg=pyflwor\r\n```\r\n`catkin_virtualenv` (0.3.0) fails with a parse error as follows:\r\n\r\n```\r\nScanning dependencies of target catkin_virtualenv_editable_error_generate_virtualenv\r\n[ 33%] Generating generated_requirements.txt\r\nTraceback (most recent call last):\r\n  File \"/home/nlimpert/dev/rosin_ws/src/catkin_virtualenv/catkin_virtualenv/scripts/combine_requirements\", line 71, in <module>\r\n    sys.exit(combine_requirements(**vars(args)))\r\n  File \"/home/nlimpert/dev/rosin_ws/src/catkin_virtualenv/catkin_virtualenv/scripts/combine_requirements\", line 43, in combine_requirements\r\n    requirement = Requirement(requirement_string)\r\n  File \"/usr/lib/python2.7/dist-packages/packaging/requirements.py\", line 94, in __init__\r\n    requirement_string[e.loc:e.loc + 8]))\r\npackaging.requirements.InvalidRequirement: Invalid requirement, parse error at \"'-e git+h'\"\r\nCMakeFiles/catkin_virtualenv_editable_error_generate_virtualenv.dir/build.make:70: recipe for target 'generated_requirements.txt' failed\r\nmake[2]: *** [generated_requirements.txt] Error 1\r\nmake[2]: *** Deleting file 'generated_requirements.txt'\r\nCMakeFiles/Makefile2:163: recipe for target 'CMakeFiles/catkin_virtualenv_editable_error_generate_virtualenv.dir/all' failed\r\nmake[1]: *** [CMakeFiles/catkin_virtualenv_editable_error_generate_virtualenv.dir/all] Error 2\r\nMakefile:138: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```\r\n\r\nNote: The particular line was taken from executing `pip freeze` - (re-)installing it via `pip install -r requirements.txt` works.\r\n\r\n----\r\n\r\nPlease find a small example package [here](https://github.com/nlimpert/catkin_virtualenv_editable_error)."
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels:
    - good first issue
    - help wanted
- url: 'https://github.com/locusrobotics/catkin_virtualenv/pull/32'
  title: Merge repeated requirements
  body: "Supercede #27,  close #26, #12\r\n\r\nSee https://github.com/locusrobotics/catkin_virtualenv/pull/27#issuecomment-443869031:\r\n\r\n> dropping the fancy version merging, and going for a 'top-most version declaration wins' approach when combining requirements, and just use the package name as a key. I believe this is basically how pip works anyways, since it doesn't do any real dependency resolution (pypa/pip#988), and it's probably delusional to do a half-baked implementation here. Version merging in catkin_virtualenv has so-far caused nothing but problems (#12, #18)\r\n\r\nUses the upstream API in python-packaging, to make sure we cover all our bases instead of implementing the parsing internally.\r\n\r\nRequires https://github.com/ros/rosdistro/pull/19587"
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels: []
- url: 'https://github.com/locusrobotics/catkin_virtualenv/issues/28'
  title: Startup Error after bloom packaging
  body: "I am using this package to wrap up some ROS utility classes and scripts. I included it into my Jenkins build-deploy pipeline and all goes well, including the deb file packaging. However, when I attempt\r\n\r\n```\r\nrosrun <package> <script name>\r\n```\r\n\r\nI get an import error when it tries to pull in `rospy`:\r\n```\r\nImportError: cannot import name _remove_dead_weakref\r\n```\r\nThis is a system library, so I wonder if rosrun is not activating the virtual environment correctly. Has anyone run into a similar issue when deploying with this tool?\r\n\r\n**Update**: I ran my build-deploy process using the test_catkin_virtualenv package and had the same error output, but generated from a `rosunit` import."
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels: []
- url: 'https://github.com/locusrobotics/catkin_virtualenv/issues/26'
  title: Expand the version_regex pattern
  body: "Getting this error:\r\n\r\n```cmake\r\n[ 10%] Generating ../generated_requirements.txt\r\nTraceback (most recent call last):\r\n  File \"/home/michael/rasa_ws/src/catkin_virtualenv/cmake/combine_requirements.py\", line 60, in <module>\r\n    sys.exit(combine_requirements(**vars(args)))\r\n  File \"/home/michael/rasa_ws/src/catkin_virtualenv/cmake/combine_requirements.py\", line 39, in combine_requirements\r\n    requirement = requirements.Requirement(requirement_string)\r\n  File \"/home/michael/rasa_ws/src/catkin_virtualenv/src/catkin_virtualenv/requirements.py\", line 85, in __init__\r\n    self.version = SemVer(fields[1])\r\n  File \"/home/michael/rasa_ws/src/catkin_virtualenv/src/catkin_virtualenv/requirements.py\", line 34, in __init__\r\n    string, self.version_regex.pattern))\r\nRuntimeError: Invalid requirement version 1.0.post1, must match ^[0-9\\.]+$\r\nslang/CMakeFiles/slang_generate_virtualenv.dir/build.make:69: recipe for target 'generated_requirements.txt' failed\r\n```\r\n\r\nwith this `requirements.txt`:\r\n\r\n```\r\nabsl-py==0.5.0\r\nastor==0.7.1\r\nattrs==18.2.0\r\nAutomat==0.7.0\r\nbackports.functools-lru-cache==1.5\r\nbackports.weakref==1.0.post1\r\nboto3==1.9.8\r\nbotocore==1.12.8\r\ncertifi==2018.8.24\r\nchardet==3.0.4\r\ncloudpickle==0.5.6\r\ncoloredlogs==10.0\r\nconstantly==15.1.0\r\ncycler==0.10.0Could not find a version that satisfies the requirement backports.weakref==1.0 (from -r /home/michael/rasa_ws/build/generated_requirements.txt (line 5)) (from versions: 1.0rc1, 1.0.post1)\r\nNo matching distribution found for backports.weakref==1.0 (from -r /home/michael/rasa_ws/build/generated_requirements.txt (line 5))\r\ndocutils==0.14\r\nenum34==1.1.6\r\nfuncsigs==1.0.2\r\nfunctools32==3.2.3.post2\r\nfuture==0.16.0\r\nfutures==3.2.0\r\ngast==0.2.0\r\ngevent==1.3.6\r\ngreenlet==0.4.15\r\ngrpcio==1.15.0\r\nhumanfriendly==4.16.1\r\nhyperlink==18.0.0\r\nidna==2.7\r\nincremental==17.5.0\r\njmespath==0.9.3\r\njsonschema==2.6.0\r\nkiwisolver==1.0.1\r\nklein==17.10.0\r\nMarkdown==2.6.11\r\nmatplotlib==2.2.3\r\nmock==2.0.0\r\nmonotonic==1.5\r\nnumpy==1.15.1\r\npackaging==17.1\r\npathlib==1.0.1\r\npbr==4.2.0\r\nprotobuf==3.6.1\r\nPyHamcrest==1.9.0\r\npyparsing==2.2.1\r\npython-crfsuite==0.9.6\r\npython-dateutil==2.7.3\r\npytz==2018.5\r\nPyYAML==3.13\r\nrasa-nlu==0.13.4\r\nrequests==2.19.1\r\ns3transfer==0.1.13\r\nscikit-learn==0.19.2\r\nscipy==1.1.0\r\nsimplejson==3.16.0\r\nsix==1.11.0\r\nsklearn-crfsuite==0.3.6\r\nsubprocess32==3.5.2\r\ntabulate==0.8.2\r\ntensorboard==1.10.0\r\ntensorflow==1.10.1\r\ntermcolor==1.1.0\r\ntqdm==4.26.0\r\nTwisted==18.7.0\r\ntyping==3.6.6\r\nurllib3==1.23\r\nWerkzeug==0.14.1\r\nzope.interface==4.5.0\r\n```\r\n\r\nSo the line `backports.weakref==1.0.post1` is failing it, specifically the `post` characters.\r\n\r\nIf I remove the `post`s from all versions, I see the pip error:\r\n\r\n```\r\nCould not find a version that satisfies the requirement backports.weakref==1.0 (from -r /home/michael/rasa_ws/build/generated_requirements.txt (line 5)) (from versions: 1.0rc1, 1.0.post1)\r\nNo matching distribution found for backports.weakref==1.0 (from -r /home/michael/rasa_ws/build/generated_requirements.txt (line 5))\r\n```\r\n\r\nSo I can't use this package with the `version_regex` pattern as it is. It seems to me like this regex should \r\nbe more permissive, given that it's common practice in semantic versioning to do `-rc`, `-SNAPSHOT`, etc. depending on the language. Frankly I don't think `.post` is very descriptive or helpful, but eh, it's not my library...  `¯\\_(ツ)_/¯`\r\n\r\n\r\n> Edit: I see why the regex is strict: casting to `int` in line 36 of `requirements.py`. I'd recommend just chopping off anything that can't be cast and calling that the internal `_version`."
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels: []
- url: 'https://github.com/locusrobotics/catkin_virtualenv/issues/24'
  title: installing local python packages into virtualenv
  body: "this is not an issue but a question, please let me know if there's a more appropriate forum.\r\n\r\nlet's say I have a local python package, \"foo\", which is specified in the packages arg of generate_distutils_setup. in my requirements.txt, I have two dependencies, bar and baz. after running catkin_build, I cannot import bar or baz without activating the virtualenv, as expected. however, I /can/ import foo both inside and outside the virtualenv (though the import fails outside, due to the dependencies on bar and baz).\r\n\r\nfoo is not installed on my system, e.g. if I try to import foo without running catkin build python will not be able to find foo.\r\n\r\nis this WAI? is there a way to structure my build such that foo is only discoverable when the virtualenv is activated?"
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels: []
- url: 'https://github.com/locusrobotics/catkin_virtualenv/issues/6'
  title: Interaction/integration with pkgs that have setup.py?
  body: "I'm not a Python expert, but I'm looking to use `catkin_virtualenv` to distribute a Python-based tool - with quite some dependencies not available as a Debian (or other) package - as a catkin pkg.\r\n\r\nThis pkg has a `setup.py` which installs two modules and a nr of scripts (entrypoints).\r\n\r\nIs there a way for `catkin_virtualenv` to use it, or would I have to recreate what it does in the added `CMakeLists.txt`?\r\n"
  repo: 'https://api.github.com/repos/locusrobotics/catkin_virtualenv'
  labels: []

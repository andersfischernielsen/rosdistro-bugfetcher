- url: 'https://github.com/ros-drivers/rosserial/issues/418'
  title: cannot import name 'RosSerialServer' from 'rosserial_python'
  body: "When I run rosrun rosserial_python serial_node.py _port:=/dev/ttyUSB0, there is a problem\r\n\r\nTraceback (most recent call last):\r\n  File \"/opt/ros/kinetic/lib/rosserial_python/serial_node.py\", line 39, in <module>\r\n    from rosserial_python import SerialClient, RosSerialServer\r\nImportError: cannot import name 'RosSerialServer' from 'rosserial_python' (/opt/ros/kinetic/lib/python2.7/dist-packages/rosserial_python/__init__.py)\r\n\r\nI don't know how to fix it"
  repo: 'https://api.github.com/repos/ros-drivers/rosserial'
  labels: []
- url: 'https://github.com/ros-drivers/rosserial/pull/417'
  title: Add ros teensy
  body: "# rosserial_teensy\r\n\r\nThis PR merges the [ros-teensy](https://github.com/mcgill-robotics/ros-teensy) project into rosserial while preserving commit history. This appears to be the best place for this package to be released from as a number of other platforms are supported here.\r\n\r\nIf this makes sense to all stake holders this seems to be the best path to ensure this project remains well maintained into the future.\r\n\r\n## Issues Addressed\r\n\r\n* https://github.com/mcgill-robotics/ros-teensy/issues/2\r\n* https://github.com/ros-drivers/rosserial/issues/416\r\n\r\n## Future Work\r\n\r\nThis package does rely upon a blob supplied from PJRC as well as an ARM gcc toolchain. I am not sure how these dependencies may affect some users. There may need to be future work with respect to the blob from the device manufacturer to further streamline usage."
  repo: 'https://api.github.com/repos/ros-drivers/rosserial'
  labels: []
- url: 'https://github.com/ros-drivers/rosserial/issues/373'
  title: arduino-cmake error while running catkin_make
  body: "I am trying to `cmake` build a servo controller using arduino. For that I have installed arduino1.8.3. Then, I cloned arduino-cmake from github. All the required dependencies necessary for `arduino-cmake `have been installed. I also cloned rosserial. Then, I created `HelloWorld `project as mentioned in ros documentation.  I actually previously  installed `arduino-nightly` and then removed it from /usr/share. Then I installed arduino-1.8.3 and copied its source folder to /usr/share. Then, when I go for `catkin_make` I get following error. \r\n\r\n```\r\nCMake Error at /home/anindya/catkin_test_6/src/rosserial/rosserial_arduino/arduino-cmake/cmake/Platform/Arduino.cmake:1474 (file):\r\n  file failed to open for reading (No such file or directory):\r\n\r\n    /usr/share/arduino-nightly/lib/version.txt\r\nCall Stack (most recent call first):\r\n  /home/anindya/catkin_test_6/src/rosserial/rosserial_arduino/arduino-cmake/cmake/Platform/Arduino.cmake:2201 (detect_arduino_version)\r\n  /usr/local/share/cmake-3.10/Modules/CMakeSystemSpecificInformation.cmake:26 (include)\r\n  CMakeLists.txt.\r\n\r\nCMake Error at /home/anindya/catkin_test_6/src/rosserial/rosserial_arduino/arduino-cmake/cmake/Platform/Arduino.cmake:1484 (string):\r\n  string sub-command REPLACE requires at least four arguments.\r\nCall Stack (most recent call first):\r\n  /home/anindya/catkin_test_6/src/rosserial/rosserial_arduino/arduino-cmake/cmake/Platform/Arduino.cmake:2201 (detect_arduino_version)\r\n  /usr/local/share/cmake-3.10/Modules/CMakeSystemSpecificInformation.cmake:26 (include)\r\n  CMakeLists.txt\r\n\r\n\r\nCMake Error at /home/anindya/catkin_test_6/src/rosserial/rosserial_arduino/arduino-cmake/cmake/Platform/Arduino.cmake:2208 (message):\r\n  Unsupported Arduino SDK (require verion 0.19 or higher)\r\nCall Stack (most recent call first):\r\n  /usr/local/share/cmake-3.10/Modules/CMakeSystemSpecificInformation.cmake:26 (include)\r\n  CMakeLists.txt\r\n-- Configuring incomplete, errors occurred!\r\n\r\n```\r\n  \r\nPlease let me know how to fix it."
  repo: 'https://api.github.com/repos/ros-drivers/rosserial'
  labels: []
- url: 'https://github.com/ros-drivers/rosserial/pull/349'
  title: Added service to force an Arduino hard reset in serial_node.py
  body: "An Arduino may become unresponsive, either due to subtle coding bugs, memory fragmentation, or electrical faults. When this happens, it will often become completely unresponsive, resulting in the repeated rosserial error \"Lost sync with device, restarting...\". However, despite this message, there's no code in serial_node.py to actually restart the Arduino. It merely waits for the Arduino to come back online, which rarely ever happens. Currently, in this instance, the only fix is to reset the Arduino, either by manually pressing the Arduino's reset button or by running a program like `ard-reset-arduino <port>`.\r\n\r\nThis change adds the ability to programmatically reset the Arduino via a service call to the serial_node.py. It has the same effect as someone pressing the Arduino's reset button.\r\n\r\nI debated adding code to automatically call this reset, but decided not to because I thought the logic of when it should be called would heavily depends on the application, and so it would better be left to the end user to implement in a custom node.\r\n\r\nThe intended use case of this would be to implement a custom node that monitors the diagnostic messages generated by serial_node.py, looking for the \"last sync lost\" key, and if this is seen repeatedly, then to call the `~hard_reset` service on the node to force the Arduino to come back online."
  repo: 'https://api.github.com/repos/ros-drivers/rosserial'
  labels: []

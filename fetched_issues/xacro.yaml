- url: 'https://github.com/ros/xacro/issues/197'
  title: ROS Dependencies
  body: "I'm trying to run Xacro in Travis tests and in a standalone program which aims to run on several OS.\r\nThe few dependencies on ROS are very annoying to achieve this goal.\r\n\r\nThere are very few ROS dependencies, and I'm wondering if fallbacks without ROS could be implemented. Basically these two ones:\r\n\r\n1. The substitution mechanism: https://github.com/ros/xacro/blob/melodic-devel/src/xacro/__init__.py#L189\r\n\r\n    This is the worst one, because if roslaunch and rospkg are not installed, then xacro fails there.\r\n\r\n    Typically arguments for `eval_extension` are `'$(find ur_description)'` and returns a path. Naively, it seems easy to write a working fallback for this case.\r\n\r\n2. rosgraph: https://github.com/ros/xacro/blob/0ae956da439bde5dc3fe19d9abc06c618a5ef6e9/src/xacro/cli.py#L96\r\n\r\n    Here, it's less problematic, because a non-blocking fallback is already implemented. But I'm wondering about the possible side effects.\r\n\r\nWhat's your point of view on this?\r\n"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/182'
  title: suppress xacro warnings when determining dependencies
  body: "Instead of using xacro's stderr, use the process result to determine success.\r\nOn stderr all kinds of warnings are published.\r\nThis PR should be cherry-picked to the `lunar` branch as well."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/179'
  title: 'python builtins: allow max, min'
  body: "Retargeting #178 to `melodic-devel`:\r\n\r\nOnly a subset of python builtin functions are permitted in xacro `${}` expressions for security reasons, for reasons listed [here](http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html). I recently wanted to use `min` and `max` in a xacro file, so I wonder if they can be added to this list.\r\n\r\nI looked at the list of python builtin functions that could be useful for math operations, and many of them have alternatives since we import `math.*`:\r\n\r\n* `abs`: use `math.fabs`\r\n* `len`: use `.__len__()` object method\r\n* `pow`: use `**`\r\n* `sum`: use `math.fsum`\r\n\r\nThe only other one I would consider adding is `round`. You can get partial functionality with `math.floor` and `math.ceil`, but not the same. Currently, though, I just need `max` and `min`. I would propose back porting this if it is acceptable."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/178'
  title: 'python builtins: allow max, min'
  body: "Only a subset of python builtin functions are permitted in xacro `${}` expressions for security reasons, for reasons listed [here](http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html). I recently wanted to use `min` and `max` in a xacro file, so I wonder if they can be added to this list.\r\n\r\nI looked at the list of python builtin functions that could be useful for math operations, and many of them have alternatives since we import `math.*`:\r\n\r\n* `abs`: use `math.fabs`\r\n* `len`: use `.__len__()` object method\r\n* `pow`: use `**`\r\n* `sum`: use `math.fsum`\r\n\r\nThe only other one I would consider adding is `round`. You can get partial functionality with `math.floor` and `math.ceil`, but not the same. Currently, though, I just need `max` and `min`. I would propose back porting this to kinetic if it is acceptable.\r\n\r\ncc @sloretz @clalancette"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/171'
  title: improve dependency handling
  body: "The new support of variable-based `include` files and supporting `load_yaml()`,\r\nintroduces dependencies that cannot be catched by `xacro --deps`.\r\nThe new argument DEPENDS allows to specify any other files required.\r\n\r\nSleeping a night over this issue, it came clear to me that it would be much better to directly list files loaded with load_yaml in the dependencies too. That's what the second commit achieves. However, I think manually added dependencies should be still possible, just in case...\r\n\r\nThis reopens #167."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/170'
  title: Python macros
  body: "Heres a rough sketch of what I was referring to in #168. I put this together to work with [this](https://github.com/Zabot/mesh_tools/blob/master/scripts/hardware.py) python script which generates the link properties given a mesh. The macro is included by [this](https://github.com/Zabot/mesh_tools/blob/master/urdf/example.urdf.xacro) xacro.\r\n\r\nI added one additional tag, `xacro:python` which has a two attributes `file` and `module`. Adding an `xacro:python` tag will import `module` from `file`. Macro calls will tested against the attributes defined in imported `module`s if they don't match any existing macros, and if a matching attribute is found that attribute will be called and passed the attributes of the macro as keyword arguments.\r\n\r\nIn an xacro file:\r\n```xml\r\n<xacro:python file=\"$(find some_package)/scripts/useful.py\" module=\"useful\"/>\r\n<xacro:complex_macro foo=\"foobar\" bar=\"foobar\"/>\r\n```\r\n\r\nuseful.py:\r\n```python\r\ndef complex_macro(foo, bar):\r\n    return '<link name=\"{}\"/>'.format(foo + bar)\r\n```\r\n\r\nI'm not a huge fan of how XML elements are passed to and from the user function call (being stringified, and then parsed out both ways), but I wanted to get the idea out for comment. Because the user function is actually being imported as opposed to just being `eval`ed, we could allow for stronger typing/pass actual DOM elements back and forth."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/issues/169'
  title: 'ModuleNotFoundError: No module named ''fnmatch'''
  body: "```\r\n patrick@dell  ~/ros_ws/lunar  roslaunch urdf_tutorial display.launch model:=urdf/01-myfirst.urdf\r\n... logging to /home/patrick/.ros/log/d6fe2a1a-bfdd-11e7-90c4-f8da0c93ee61/roslaunch-dell-17451.log\r\nChecking log directory for disk usage. This may take awhile.\r\nPress Ctrl-C to interrupt\r\nDone checking log file disk usage. Usage is <1GB.\r\n\r\nTraceback (most recent call last):\r\n  File \"/mnt/hd/ros_ws/lunar/install_isolated/share/xacro/xacro.py\", line 55, in <module>\r\n    import xacro\r\n  File \"/mnt/hd/ros_ws/lunar/install_isolated/lib/python3.6/site-packages/xacro/__init__.py\", line 35, in <module>\r\n    import glob\r\n  File \"/usr/lib/python3.6/glob.py\", line 5, in <module>\r\n    import fnmatch\r\nModuleNotFoundError: No module named 'fnmatch'\r\nInvalid <param> tag: Cannot load command parameter [robot_description]: command [/mnt/hd/ros_ws/lunar/install_isolated/share/xacro/xacro.py urdf/01-myfirst.urdf] returned with code [1]. \r\n\r\nParam xml is <param command=\"$(find xacro)/xacro.py $(arg model)\" name=\"robot_description\"/>\r\nThe traceback for the exception was written to the log file\r\n```\r\n"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/issues/168'
  title: Adding support for python macros
  body: "A while back I wrote a python script that generated static xacro macros from a directory of .stls that could be imported into you main .xacro as `hardware.xacro` and significantly simplified the robot description. Unfortunately it was limited in the macros it could generate, because the support for mathematical operations in xacro is limited. We could allow for some more complex xacro macros with some kind of `<xacro:python>` block that functions similarly to a macro block, but replaces the contents with the value returned by a python function, something along these lines:\r\n```python\r\ndef mesh_link(name, mesh):\r\n    # Calculate bounding box and inertial tensor from STL\r\n    visual_block = ...\r\n    collision_block = ...\r\n    inertial_block = ...\r\n    return '<link name=\"{}\">{}{}{}</link>'\r\n        .format(name, visual_block, inertial_block, collision_block)\r\n```\r\n```xml\r\n<xacro:python name=\"mesh_link\" name=\"wheel\"\r\n    mesh=\"$(find robot_description)/meshes/wheel.stl\"/>\r\n```\r\nMy mesh property calculation macro is the only concrete use case I've come up with so far, but I could imagine some other more powerful macros that further simplify the process of robot description. What do you all think?"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/167'
  title: allow to specify extra dependencies for xacro_add_xacro_file(s)
  body: "Allowing to include variable-generated files and supporting load_yaml(),\r\nintroduces dependencies that cannot be catched by xacro --deps.\r\nThe new argument DEPENDS allows to specify any other files required.\r\n\r\nSleeping a night over this issue, it came clear to me that it would be much better to directly list files loaded with load_yaml in the dependencies too. That's what the second commit achieves. However, I think manually added dependencies should be still possible in case..."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/159'
  title: optional loading of ROS-related packages
  body: "To broaden xacro's usability domain, import ROS-related packages optionally only, disabling associated features like substitution_args and remapping in this case. Thus, xacro can be used without a ROS environment.\r\nThis is somehow related to #154 because ROS2 cannot yet provide all substitution args too."
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/issues/153'
  title: rosrun xacro xacro.py or rosrun xacro xacro fails with import error
  body: "Running on ROS Indigo on Raspberry Pi3 with Jessie. (This issue does not arise on Ubuntu 14.04 running ROS Indigo)\r\n\r\n$ rosrun xacro xacro\r\nTraceback (most recent call last):\r\n  File \"/home/username/catkin_ws/src/xacro-indigo-devel/scripts/xacro\", line 53, in <module>\r\n    import xacro\r\nImportError: No module named xacro\r\n"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/147'
  title: Add option to generate files with .urdf suffix
  body: "Currently the generated files do not have an extension at all, I think it would be nice to be able to add the extension automatically.\r\n\r\nThis new option allows to generate files with the URDF extension.\r\n\r\nExample:\r\n\r\n\r\n```cmake\r\nset(\r\n  xacro_files\r\n  ${CMAKE_CURRENT_SOURCE_DIR}/urdf/robot_1.xacro\r\n  ${CMAKE_CURRENT_SOURCE_DIR}/urdf/robot_2.xacro\r\n  )\r\n\r\nxacro_add_files(\r\n  ${xacro_files}\r\n  INORDER\r\n  URDF_EXTENSION\r\n  TARGET\r\n  xacro_target\r\n  INSTALL\r\n  DESTINATION\r\n  urdf\r\n)\r\n```\r\n\r\n\r\n```bash\r\n$ catkin_make install\r\nBase path: /home/victor/code/catkin_workspace\r\nSource space: /home/victor/code/catkin_workspace/src\r\nBuild space: /home/victor/code/catkin_workspace/build\r\nDevel space: /home/victor/code/catkin_workspace/devel\r\nInstall space: /home/victor/code/catkin_workspace/install\r\n####\r\n#### Running command: \"cmake /home/victor/code/catkin_workspace/src -DCATKIN_DEVEL_PREFIX=/home/victor/code/catkin_workspace/devel -DCMAKE_INSTALL_PREFIX=/home/victor/code/catkin_workspace/install -G Unix Makefiles\" in \"/home/victor/code/catkin_workspace/build\"\r\n####\r\n-- The C compiler identification is GNU 6.2.0\r\n-- The CXX compiler identification is GNU 6.2.0\r\n-- Check for working C compiler: /usr/lib/ccache/cc\r\n-- Check for working C compiler: /usr/lib/ccache/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++\r\n-- Check for working CXX compiler: /usr/lib/ccache/c++ -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Using CATKIN_DEVEL_PREFIX: /home/victor/code/catkin_workspace/devel\r\n-- Using CMAKE_PREFIX_PATH: /opt/ros/kinetic\r\n-- This workspace overlays: /opt/ros/kinetic\r\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.12\") \r\n-- Using PYTHON_EXECUTABLE: /usr/bin/python\r\n-- Using Debian Python package layout\r\n-- Using empy: /usr/bin/empy\r\n-- Using CATKIN_ENABLE_TESTING: ON\r\n-- Call enable_testing()\r\n-- Using CATKIN_TEST_RESULTS_DIR: /media/victor/Data/code/catkin_workspace/build/test_results\r\n-- Looking for pthread.h\r\n-- Looking for pthread.h - found\r\n-- Looking for pthread_create\r\n-- Looking for pthread_create - not found\r\n-- Looking for pthread_create in pthreads\r\n-- Looking for pthread_create in pthreads - not found\r\n-- Looking for pthread_create in pthread\r\n-- Looking for pthread_create in pthread - found\r\n-- Found Threads: TRUE  \r\n-- Found gtest sources under '/usr/src/gtest': gtests will be built\r\n-- Using Python nosetests: /usr/bin/nosetests-2.7\r\n-- catkin 0.7.6\r\n-- BUILD_SHARED_LIBS is on\r\n-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n-- ~~  traversing 1 packages in topological order:\r\n-- ~~  - xacro_urdf_cmake\r\n-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n-- +++ processing catkin package: 'xacro_urdf_cmake'\r\n-- ==> add_subdirectory(xacro_urdf_cmake)\r\n-- xacro: determining deps for: /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_1.xacro ...\r\n-- xacro: determining deps for: /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_2.xacro ...\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /media/victor/Data/code/catkin_workspace/build\r\n####\r\n#### Running command: \"make install -j4 -l4\" in \"/home/victor/code/catkin_workspace/build\"\r\n####\r\nScanning dependencies of target xacro_urdf_cmake_xacro_target\r\nScanning dependencies of target xacro_urdf_cmake_xacro_target_to_devel_space_\r\n[ 14%] xacro: generating /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_2.urdf from /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_2.xacro\r\n[ 28%] xacro: generating /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_1.urdf from /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_1.xacro\r\n[ 42%] creating dir /home/victor/code/catkin_workspace/devel/share/xacro_urdf_cmake/urdf\r\n[ 57%] xacro: generating /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_1.urdf from /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_1.xacro\r\n[ 71%] xacro: generating /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_2.urdf from /home/victor/code/catkin_workspace/src/xacro_urdf_cmake/urdf/robot_2.xacro\r\n[ 85%] Copying to devel space: /home/victor/code/catkin_workspace/devel/share/xacro_urdf_cmake/urdf/robot_2.urdf\r\n[ 85%] Built target xacro_urdf_cmake_xacro_target\r\n[100%] Copying to devel space: /home/victor/code/catkin_workspace/devel/share/xacro_urdf_cmake/urdf/robot_1.urdf\r\n[100%] Built target xacro_urdf_cmake_xacro_target_to_devel_space_\r\nScanning dependencies of target xacro_urdf_cmake_xacro_generated_to_devel_space_\r\n[100%] Built target xacro_urdf_cmake_xacro_generated_to_devel_space_\r\nInstall the project...\r\n-- Install configuration: \"\"\r\n-- Installing: /home/victor/code/catkin_workspace/install/_setup_util.py\r\n-- Installing: /home/victor/code/catkin_workspace/install/env.sh\r\n-- Installing: /home/victor/code/catkin_workspace/install/setup.bash\r\n-- Installing: /home/victor/code/catkin_workspace/install/setup.sh\r\n-- Installing: /home/victor/code/catkin_workspace/install/setup.zsh\r\n-- Installing: /home/victor/code/catkin_workspace/install/.rosinstall\r\n-- Installing: /home/victor/code/catkin_workspace/install/lib/pkgconfig/xacro_urdf_cmake.pc\r\n-- Installing: /home/victor/code/catkin_workspace/install/share/xacro_urdf_cmake/cmake/xacro_urdf_cmakeConfig.cmake\r\n-- Installing: /home/victor/code/catkin_workspace/install/share/xacro_urdf_cmake/cmake/xacro_urdf_cmakeConfig-version.cmake\r\n-- Installing: /home/victor/code/catkin_workspace/install/share/xacro_urdf_cmake/package.xml\r\n-- Installing: /home/victor/code/catkin_workspace/install/share/xacro_urdf_cmake/urdf/robot_1.urdf\r\n-- Installing: /home/victor/code/catkin_workspace/install/share/xacro_urdf_cmake/urdf/robot_2.urdf\r\n\r\n```"
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/117'
  title: optionally include latest improvements in xacro-jade into xacro-indigo
  body: >
    The `--inorder` flag is used to switch between them. Since the `--inorder`
    flag is illegal in xacro-indigo, this new conditional import should not
    affect any existing indigo xacro usage.
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/112'
  title: use correct catkin environment for cmake dependency checking
  body: |
    Both, the final and the dependency-checking xacro calls, should
    be executed within the correct catkin environment. Otherwise different
    xacro versions might be used for both steps.
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []
- url: 'https://github.com/ros/xacro/pull/111'
  title: fixed dependency definition for cmake usage
  body: >
    Due to wrong parantheses, xacro dependencies were not considered at all.
    Fixed now.
  repo: 'https://api.github.com/repos/ros/xacro'
  labels: []

- url: 'https://github.com/ros/pluginlib/issues/147'
  title: 'pluginlib fails to build using clang compiler '
  body: "This issue was originally reported here  [pluginlib fails to build using clang compiler #678](https://github.com/ros2/ros2/issues/678) on https://github.com/ros2/ros2 where it was suggested that I post the issue to this repository \r\n\r\n## Bug report\r\n\r\n**Required Info:**\r\n\r\n- Operating System:\r\n  - Ubuntu 18.04\r\n- Installation type:\r\n  - source\r\n- Version or commit hash:\r\n  - release-latest bbf4dd1371df02b3f446dacd4bb4f6aed181db14\r\n- DDS implementation:\r\n  - Fast-RTPS\r\n- Client library (if applicable):\r\n  - pluginlib\r\n\r\n#### Steps to reproduce issue\r\nDockerfile:\r\n```Dockerfile \r\nFROM ubuntu:18.04\r\n\r\nENV CHOOSE_ROS_DISTRO=crystal\r\n\r\nRUN echo 'Etc/UTC' > /etc/timezone && \\\r\n    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \\\r\n    apt-get update && apt-get install -q -y tzdata curl gnupg2 lsb-release \\\r\n    && curl http://repo.ros2.org/repos.key | apt-key add - \\\r\n    && sh -c 'echo \"deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu `lsb_release -cs` main\" > /etc/apt/sources.list.d/ros2-latest.list'  \\   \r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n# Install tools\r\nRUN apt-get update --fix-missing && apt-get install -y \\\r\n    build-essential \\\r\n    cmake \\\r\n    git \\\r\n    python3-colcon-common-extensions \\\r\n    python3-pip \\\r\n    python-rosdep \\\r\n    python3-vcstool \\\r\n    wget \\\r\n    libasio-dev \\\r\n    libtinyxml2-dev \\\r\n    clang \\\r\n    clang-tidy \\\r\n# install some pip packages needed for testing\r\n    && python3 -m pip install -U \\\r\n    argcomplete \\\r\n    flake8 \\\r\n    flake8-blind-except \\\r\n    flake8-builtins \\\r\n    flake8-class-newline \\\r\n    flake8-comprehensions \\\r\n    flake8-deprecated \\\r\n    flake8-docstrings \\\r\n    flake8-import-order \\\r\n    flake8-quotes \\\r\n    git+https://github.com/lark-parser/lark.git@0.7b \\\r\n    pytest-repeat \\\r\n    pytest-rerunfailures \\\r\n    pytest \\\r\n    pytest-cov \\\r\n    pytest-runner \\\r\n    setuptools \\ \r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\n#Setup ROS2 code for compile\r\nWORKDIR /root/ros2_ws/ros2_base\r\n\r\n# ADD ros2.repos /root/ros2_ws/ros2_base/ros2.repos\r\nRUN wget https://raw.githubusercontent.com/ros2/ros2/release-latest/ros2.repos \\\r\n    && mkdir src \\\r\n    && vcs import src < ros2.repos \\\r\n    && rosdep init \\\r\n    && apt-get update && rosdep update \\\r\n    && rosdep install --from-paths src --ignore-src --rosdistro crystal -y --skip-keys \"console_bridge fastcdr fastrtps libopensplice67 libopensplice69 rti-connext-dds-5.3.1 urdfdom_headers\" \\\r\n    && rm -rf /var/lib/apt/lists/*\r\n\r\nENV CC=/usr/bin/clang\r\nENV CXX=/usr/bin/clang++\r\n\r\nWORKDIR /root/ros2_ws/ros2_base\r\nRUN colcon build --cmake-args -DCMAKE_BUILD_TYPE=DEBUG --merge-install\r\n```\r\n```bash\r\ndocker build -f Dockerfile -t ros2source:latest .\r\n```\r\n#### Expected behavior\r\nSuccessful build of the docker container\r\n#### Actual behavior\r\n```bash\r\n[Processing: pluginlib, test_msgs]\r\n--- stderr: pluginlib\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `pluginlib::ClassLoader<test_base::Fubar>::getPackageFromPluginXMLFilePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\r\nunique_ptr_test.cpp:(.text._ZN9pluginlib11ClassLoaderIN9test_base5FubarEE31getPackageFromPluginXMLFilePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE[_ZN9pluginlib11ClassLoaderIN9test_base5FubarEE31getPackageFromPluginXMLFilePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE]+0x59): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::parent_path() const'\r\nunique_ptr_test.cpp:(.text._ZN9pluginlib11ClassLoaderIN9test_base5FubarEE31getPackageFromPluginXMLFilePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE[_ZN9pluginlib11ClassLoaderIN9test_base5FubarEE31getPackageFromPluginXMLFilePathERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE]+0x241): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::parent_path() const'\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `std::experimental::filesystem::v1::__cxx11::path::path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::experimental::filesystem::v1::__cxx11::path>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\r\nunique_ptr_test.cpp:(.text._ZNSt12experimental10filesystem2v17__cxx114pathC2INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES3_EERKT_[_ZNSt12experimental10filesystem2v17__cxx114pathC2INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES3_EERKT_]+0x5e): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::_M_split_cmpts()'\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `std::experimental::filesystem::v1::exists(std::experimental::filesystem::v1::__cxx11::path const&)':\r\nunique_ptr_test.cpp:(.text._ZNSt12experimental10filesystem2v16existsERKNS1_7__cxx114pathE[_ZNSt12experimental10filesystem2v16existsERKNS1_7__cxx114pathE]+0x11): undefined reference to `std::experimental::filesystem::v1::status(std::experimental::filesystem::v1::__cxx11::path const&)'\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `std::experimental::filesystem::v1::__cxx11::path::path<char [12], std::experimental::filesystem::v1::__cxx11::path>(char const (&) [12])':\r\nunique_ptr_test.cpp:(.text._ZNSt12experimental10filesystem2v17__cxx114pathC2IA12_cS3_EERKT_[_ZNSt12experimental10filesystem2v17__cxx114pathC2IA12_cS3_EERKT_]+0x5b): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::_M_split_cmpts()'\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `std::experimental::filesystem::v1::__cxx11::path::_M_append(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)':\r\nunique_ptr_test.cpp:(.text._ZNSt12experimental10filesystem2v17__cxx114path9_M_appendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE[_ZNSt12experimental10filesystem2v17__cxx114path9_M_appendERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE]+0x9b): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::_M_split_cmpts()'\r\nCMakeFiles/pluginlib_unique_ptr_test.dir/test/unique_ptr_test.cpp.o: In function `std::experimental::filesystem::v1::__cxx11::path::clear()':\r\nunique_ptr_test.cpp:(.text._ZNSt12experimental10filesystem2v17__cxx114path5clearEv[_ZNSt12experimental10filesystem2v17__cxx114path5clearEv]+0x1e): undefined reference to `std::experimental::filesystem::v1::__cxx11::path::_M_split_cmpts()'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [pluginlib_unique_ptr_test] Error 1\r\nmake[1]: *** [CMakeFiles/pluginlib_unique_ptr_test.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n---\r\nFailed   <<< pluginlib  [ Exited with code 2 ]\r\n```\r\n#### Additional information\r\n```bash\r\nroot@b8f13126204c:~/ros2_ws/ros2_base# clang --version\r\nclang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\r\nTarget: x86_64-pc-linux-gnu\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n```\r\n"
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels: []
- url: 'https://github.com/ros/pluginlib/pull/144'
  title: Add stdc++fs as a target link library for clang compiler on linux
  body: "This change is needed to compile pluginlib package and packages which\r\ndepend on it on linux clang compiler"
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels: []
- url: 'https://github.com/ros/pluginlib/pull/138'
  title: Fix dev build dep on TinyXML2
  body: Tests weren't properly depending on tinyxml2_vendor.
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels: []
- url: 'https://github.com/ros/pluginlib/pull/120'
  title: export rcutils
  body: "ran into issues when building in overlay:\r\n\r\n```\r\nIn file included from /Users/karsten/workspace/osrf/ros2_full/install/pluginlib/include/pluginlib/class_loader.hpp:357:\r\n/Users/karsten/workspace/osrf/ros2_full/install/pluginlib/include/pluginlib/./class_loader_imp.hpp:55:10: fatal error: 'rcutils/logging_macros.h' file not found\r\n#include \"rcutils/logging_macros.h\"\r\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\nWhen applying this patch (exporting `rcutils` as a dependency), this problem is resolved."
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels: []
- url: 'https://github.com/ros/pluginlib/issues/109'
  title: New compiler warning
  body: "As mentioned in ros-visualization/qt_gui_core#114.\r\n\r\nE.g. http://build.ros.org/job/Mpr__qt_gui_core__ubuntu_bionic_amd64/1/warnings22Result/"
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels:
    - bug
- url: 'https://github.com/ros/pluginlib/issues/81'
  title: Depend on libconsole-bridge-dev instead of rosconsole?
  body: "We desire to introduce `pluginlib` as a dependency for packages inside `ros_comm` without creating a repo-level circular dependency, which would presently be the case on account of `rosconsole` being inside `ros_comm` (see https://github.com/ros/ros_comm/pull/1206).\r\n\r\nAn obvious solution is to extract `rosconsole` into its own repo, but I wonder about breaking the dependency on this end, too. Excluding tests, all usages of logging in this repo are as follows:\r\n\r\n```\r\n$ grep -r \\ ROS_ *\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Creating ClassLoader, base = %s, address = %p\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Destroying ClassLoader, base = %s, address = %p\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Instance created with object pointer = %p\", obj);\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"CreateClassException about to be raised for class %s\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Attempting to create managed instance for class %s.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"%s maps to real class type %s\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"boost::shared_ptr to object of real type %s created.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"%s maps to real class type %s\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"std::unique_ptr to object of real type %s created.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Attempting to create UNMANAGED instance for class %s.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"%s maps to real class type %s\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Instance of type %s created.\", class_type.c_str());\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Entering determineAvailableClasses()...\");\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Exiting determineAvailableClasses()...\");\r\ninclude/pluginlib/class_loader_imp.h:    ROS_ERROR_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_ERROR_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Class %s has no mapping in classes_available_.\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Class %s maps to library %s in classes_available_.\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Checking path %s \", it->c_str());\r\ninclude/pluginlib/class_loader_imp.h:      ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Library %s found at explicit path %s.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Class %s has no mapping in classes_available_.\",\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"No path could be found to the library containing %s.\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Processing xml file %s...\", xml_file.c_str());\r\ninclude/pluginlib/class_loader_imp.h:      ROS_ERROR_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:      ROS_ERROR_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:        ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:        ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\",\r\ninclude/pluginlib/class_loader_imp.h:  ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Refreshing declared classes.\");\r\ninclude/pluginlib/class_loader_imp.h:    ROS_DEBUG_NAMED(\"pluginlib.ClassLoader\", \"Attempting to unload library %s for class %s\",\r\n```\r\n\r\nThe main issue with switching this is that console_bridge doesn't have the concept of named loggers the way rosconsole does, so that would be lost, however it seems like there may be some logic within rosconsole_bridge that attempts to recover a prefix embedded in the log string itself:\r\n\r\nhttps://github.com/ros/rosconsole_bridge/blob/8e27f6ef86c84b78d9fd20d883923fca70ba3532/src/bridge.cpp#L56-L75\r\n\r\nWould a PR that switches this over be acceptable to the maintainers?"
  repo: 'https://api.github.com/repos/ros/pluginlib'
  labels:
    - question
